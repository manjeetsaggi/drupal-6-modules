<?php
// $Id: w3c_validator.module,v 1.1 2009/07/28 11:27:19 pl2 Exp $

/**
 * @file
 * W3C Validator proxy.
 *
 * TODO: Refactor some output using theme functions.
 */

/**
 * Implementation of hook_menu().
 */
function w3c_validator_menu() {
  $items = array();

  $items['admin/settings/w3c_validator'] = array(
    'title' => 'W3C Validator',
    'description' => 'Settings for the W3C validator API.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('w3c_validator_admin_settings'),
    'access arguments' => array('administer w3c_validator'),
    'file' => 'w3c_validator.pages.module',
  );

  $items['validator'] = array(
    'title' => 'Validate URI',
    'description' => 'Validate URI using the W3C Validator API',
    'page callback' => 'w3c_validator_validate_uri_page',
    'access arguments' => array('use w3c_validator'),
    'file' => 'w3c_validator.pages.module',
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function w3c_validator_perm() {
  return array('administer w3c_validator', 'use w3c_validator');
}

/**
 * Static storage for the result.
 *
 * @param string $uri
 * @param string $result
 * @return void
 */
function _w3c_validator_set_validation_result($result = NULL) {
  static $stored_result;

  if ($result) {
    $stored_result = $result;
  }

  return $stored_result;
}

/**
 * Get stored result.
 *
 * @return void
 */
function _w3c_validator_get_validation_result() {
  return _w3c_validator_set_validation_result();
}

/**
 * Validate a URI using the configured validator endpoint.
 *
 * @param string $uri
 * @return void
 */
function _w3c_validator_validate_uri($uri) {
  if (empty($uri)) {
    return FALSE;
  }

  $endpoint = variable_get('w3c_validator_api_endpoint_uri', '');
  if (empty($endpoint)) {
    return FALSE;
  }

  // Build url
  $check_url = $endpoint .'?uri='. urlencode($uri) .'&output=soap12';

  // Get and parse response
  $xml = file_get_contents($check_url);
  $dom = new DOMDocument();
  $dom->loadXML($xml);

  // Validity
  $validity = $dom->getElementsByTagName("validity");
  foreach ($validity as $key => $value) {
    $validity_value = $value->nodeValue;
  }

  // Errors
  $errors = $dom->getElementsByTagName("error");
  $error_array = array();
  foreach ($errors as $key => $value) {
    $line = $value->getElementsByTagName('line')->item(0)->nodeValue;
    $col = $value->getElementsByTagName('col')->item(0)->nodeValue;
    $message = $value->getElementsByTagName('message')->item(0)->nodeValue;

    $error_array[] = array(
      'line' => $line,
      'col' => $col,
      'message' => $message,
      );
  }

  // Warnings
  $warnings = $dom->getElementsByTagName("warning");
  $warning_array = array();
  foreach ($warnings as $key => $value) {
    $line = $value->getElementsByTagName('line')->item(0)->nodeValue;
    $col = $value->getElementsByTagName('col')->item(0)->nodeValue;
    $message = $value->getElementsByTagName('message')->item(0)->nodeValue;

    $warning_array[] = array(
      'line' => $line,
      'col' => $col,
      'message' => $message,
      );
  }

  // Doctype
  $doctype = $dom->getElementsByTagName('doctype')->item(0)->nodeValue;

  $result = array(
    'uri' => $uri,
    'doctype' => $doctype,
    'validity' => $validity_value,
    'errors' => $error_array,
    'warnings' => $warning_array,
    );

  return $result;
}
