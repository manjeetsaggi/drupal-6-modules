<?php
// $Id: about_this_node.module,v 1.3.2.8 2010/01/31 23:11:17 toddnienkerk Exp $

/**
 * @file
 * Displays a block containing a node's information.
 */


/**
 * Implementation of hook_perm().
 */
function about_this_node_perm() {
  return array('administer about this node', 'view about this node block');
}


/**
 * Implementation of hook_block().
 */
function about_this_node_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {

    // Displays block name in admin/build/blocks
    case 'list':
      $blocks[0]['info'] = t('About This Node');
      $blocks[0]['cache'] = BLOCK_CACHE_PER_PAGE | BLOCK_CACHE_PER_ROLE;
      return $blocks;

    // Generates block output
    case 'view':
      if (user_access('view about this node block')) {
        $block['subject'] = t('About This Node');
        $block['content'] = about_this_node_block_contents();
        return $block;
      }
  }
}


/**
 * Prepare the block and routes it to the appropriate theme function.
 */
function about_this_node_block_contents() {
  $output = '';
  $id = arg(1);
  $node_info = array();

  if (is_numeric($id)) {
    $pagetype = arg(0);

    switch ($pagetype) {

      // This version of about_this_node only displays a block for node page types (i.e., not user pages, etc.)
      case 'node':
        $node = node_load($id);
        $allowed_nodetypes = variable_get('about_this_node_nodetypes', array('story'));

        // Conditional will return 0 (FALSE) if it isn't an allowed node type
        if ($allowed_nodetypes[$node->type]) {
          $output .= theme('about_this_node_node', about_this_node_get_info($node), $node);
        }
        break;

    }
  }

  return $output;
}


/**
 * Gather information about the node and return it as a keyed array.
 */
function about_this_node_get_info($node) {
  $node_info = array();

  // "Constant" strings
  $label_yes = t('Yes');
  $label_no = t('No');
  $label_by = t('by');
  $label_on = t('on');
  
  // Node ID
  $node_info['node_id'] = array(
    'label' => t('Node ID (NID):'),
    'value' => $node->nid,
  );

  // Node type
  $node_info['node_type'] = array(
    'label' => t('Node type:'),
    'value' => node_get_types('name', $node),
  );

  // Gather author info
  $author_uid = $node->uid;
  $author = '';
  $author_output = '';
  if ($author_uid == '0') { // Check if author is anonymous
    $author_output = variable_get('anonymous', 'Anonymous');
  }
  else {
    $author = user_load(array('uid' => $author_uid));
    $author_output = l($author->name, 'user/'. $author_uid);
  }

  // Author name/time
  $node_info['created'] = array(
    'label' => t('Created:'),
    'value' => array(
      'created_on' => array(
        'label' => $label_on,
        'value' => $node->created,
      ),
      'created_by' => array(
        'label' => $label_by,
        'value' => $author_output,
      ),
    ),
  );

  // Gather last updated author info
  $update_author_uid = db_result(db_query('SELECT nr.uid FROM {node_revisions} nr INNER JOIN {node} n ON n.vid = nr.vid WHERE n.nid = %d', $node->nid));
  $update_author = '';
  $update_author_output = '';
  if ($update_author_uid == '0') { // Check if author is anonymous
    $update_author_output = variable_get('anonymous', t('Anonymous'));
  }
  else {
    $update_author = user_load(array('uid' => $update_author_uid));
    $update_author_output = l($update_author->name, 'user/'. $update_author_uid);
  }

  // Last updated author name/time
  $node_info['updated'] = array(
    'label' => t('Last updated:'),
  );

  // Check if node has never been updated
  if ($node->created == $node->changed) {
    $node_info['updated']['value'] = t('Never');
  }
  else {
    $node_info['updated']['value'] = array(
      'updated_on' => array(
        'label' => $label_on,
        'value' => $node->changed,
      ),
      'updated_by' => array(
        'label' => $label_by,
        'value' => $update_author_output,
      ),
    );
  }

  // Published status
  $node_info['published'] = array(
    'label' => t('Published:'),
  );
  if ($node->status == 1) {
    $node_info['published']['value'] = $label_yes;
  }
  else {
    $node_info['published']['value'] = $label_no;
  }

  // Promoted to front page status
  $node_info['promoted'] = array(
    'label' => t('Promoted:'),
  );
  if ($node->promote == 1) {
    $node_info['promoted']['value'] = $label_yes;
  }
  else {
    $node_info['promoted']['value'] = $label_no;
  }

  // Sticky status
  $node_info['stickied'] = array(
    'label' => t('Stickied:'),
  );
  if ($node->sticky == 1) {
    $node_info['stickied']['value'] = $label_yes;
  }
  else {
    $node_info['stickied']['value'] = $label_no;
  }

  // Commenting status
  $node_info['commenting'] = array(
    'label' => t('Commenting:'),
  );
  if (module_exists('comment') || module_exists('nodecomment')) {
    $node_info['commenting']['value'] = t('Disabled');
    if (module_exists('comment')) {
      if ($node->comment == 1) {
        $node_info['commenting']['value'] = t('Read only');
      }
      else if ($node->comment == 2) {
        $node_info['commenting']['value'] = t('Read/Write');
      }
    }
    if (module_exists('nodecomment')) {
      if ($node->node_comment == 1) {
        $node_info['commenting']['value'] = t('Read only (as !type nodes)', array('!type' => $node->comment_type));
      }
      else if ($node->node_comment == 2) {
        $node_info['commenting']['value'] = t('Read/Write (as !type nodes)', array('!type' => $node->comment_type));
      }
    }
  }
  else {
    $node_info['commenting']['value'] = t('Module not enabled');
  }

  // Translation status
  if (module_exists('translation')) {
    $node_info['translation']['label'] = t('Translation status:');
    $translations = array();
    if($node->tnid == 0) {
      $node_info['translation']['value'] = t('Untranslated');
    }
    else {
      $source = $node->tnid != $node->nid ? $node->tnid : $node->nid;
      $translation_status = db_query("SELECT n.nid, n.tnid, n.title, l.name FROM {node} as n, {languages} as l where n.language = l.language and tnid = %d", $source);
      while($row = db_fetch_object($translation_status)) {
        if ($row->nid == $row->tnid) {
          $translations[] = '[' . $row->name . ']: ' . l($row->title, 'node/' . $row->nid);
        }
        else {
          $translations[] = $row->name . ': ' . l($row->title, 'node/' . $row->nid );
        }
      }
      $node_info['translation']['value'] = implode('<br />', $translations);
    }
  }

  return $node_info;
}


/**
 * Prepare keyed array for theming as an item list.
 */
function about_this_node_prepare_info($node_info, $date_format = 'small') {
  $node_info_prepped = array();

  // Format some dates
  if (isset($node_info['created']['value']['created_on']['value'])) {
    $node_info['created']['value']['created_on']['value'] = format_date($node_info['created']['value']['created_on']['value'], $date_format);
  }
  if (isset($node_info['updated']['value']['updated_on']['value'])) {
    $node_info['updated']['value']['updated_on']['value'] = format_date($node_info['updated']['value']['updated_on']['value'], $date_format);
  }

  foreach ($node_info as $key => $item) {
    $node_info_prepped[$key] = array('data' => '<span class="aboutthisnode-label">'. $item['label'] .'</span> ');

    // If this item has children
    if (is_array($item['value'])) {
      $node_info_prepped[$key]['children'] = about_this_node_prepare_info($item['value']);
    }
    else {
      $node_info_prepped[$key]['data'] .= $item['value'];
    }
  }

  return $node_info_prepped;
}


/**
 * Implementation of hook_form_alter().
 */
function about_this_node_form_alter(&$form, $form_state, $form_id) {
  if (($form_id == 'block_admin_configure') && user_access('administer about this node')) {
    $form['about_this_node'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node type specific visibility settings'),
      '#collapsible' => TRUE,
      '#weight' => -5,
      '#description' => t('Here you can select the content types for which you want the About This Node block to be displayed. If you\'re having trouble making the block appear, make sure you have assigned the block to a region and set your permissions to allow users to see it. For more information, visit the <a href="@help">About This Node help page</a>.', array('@help' => '/admin/help/about_this_node')),
    );
    $form['about_this_node']['about_this_node_nodetypes'] = array(
      '#type' => 'checkboxes',
      '#title' => t('View information about these node types'),
      '#options' => node_get_types('names'),
      '#default_value' => variable_get('about_this_node_nodetypes', array('story')),
    );
    $form['#submit'][] = 'about_this_node_form_submit';
  }
}


/**
 * Submit handler for node type visibility settings.
 */
function about_this_node_form_submit($form, &$form_state) {
  variable_set('about_this_node_nodetypes', $form_state['values']['about_this_node_nodetypes']);
}


/**
 * Implementation of hook_help().
 */
function about_this_node_help($path, $arg) {
  switch ($path) {
    case 'admin/help#about_this_node':
      $output = '
        <p>This module creates a block that displays information about a node.</p>
        <p>To make the About This Node block appear on your site, you will need to (1) tell the module the content types for which it should display the block and (2) display this block in one of your theme\'s regions. You can configure both of these settings on the <a href="@block_page">block configuration page</a>.</p>
        <p>Finally, you will need to set permissions. Go to the <a href="@permissions_page">permissions page</a> and look for the row titled "about_this_node module." Check off which roles you want to administer the module and/or view the block.</p>';
      return t($output, array(
        '@block_page' => url('admin/build/block'),
        '@permissions_page' => url('admin/user/permissions'),
      ));
  }
}


/**
 * Implementation of hook_theme().
 */
function about_this_node_theme() {
  return array(
    'about_this_node_node' => array(
      'arguments' => array(
        'node_info' => NULL,
        'node' => NULL,
      ),
    ),
  );
}


/**
 * Theme function that build the block's output for nodes.
 */
function theme_about_this_node_node($node_info, $node) {
  return theme('item_list', about_this_node_prepare_info($node_info, 'small'));
}
