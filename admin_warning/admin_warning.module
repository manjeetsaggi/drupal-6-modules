<?php
// $Id: admin_warning.module,v 1.2 2009/02/03 00:52:38 drothstein Exp $

/**
 * @file
 * Provides a warning to site administrators reminding them that they are
 * logged in to the live site as administrators, not regular users.
 */

/**
 * Implementation of hook_help().
 */
function admin_warning_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/admin_warning':
      $help_text = array(
        t('The <em>Administrator Warning</em> module allows you to show site administrators a warning message above most forms on the site. It can be used to help prevent these users from accidentally making destructive changes, either because they forgot they were logged in as an administrator or because they forgot they were logged in to the live site (as opposed to a development server).'),
        t('On this page, you can change the text of the warning message that site administrators see and configure a list of forms that you do not want the message to appear on. To configure the user roles who will see this message, assign these roles the "see the site administrator warning" permission on the <a href="@permissions_url">user permissions page</a>.', array('@permissions_url' => url('admin/user/permissions', array('fragment' => 'module-admin_warning')))),
      );
      return theme('admin_warning_help', $help_text);
      break;
  }
}

/**
 * Implementation of hook_perm().
 */
function admin_warning_perm() {
  return array(
    'administer admin warning',
    'see the site administrator warning',
  );
}

/**
 * Implementation of hook_menu().
 */
function admin_warning_menu() {
  $items = array();
  $items['admin/settings/admin_warning'] = array(
    'title' => 'Administrator warning message',
    'description' => 'Configure the warning message shown to site administrators.',
    'page callback' => 'admin_warning_settings_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer admin warning'),
    'file' => 'admin_warning.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function admin_warning_form_alter(&$form, $form_state, $form_id) {
  // Only show the warning to site administrators viewing one of the
  // non-excluded forms.
  if (user_access('see the site administrator warning') && !in_array($form_id, admin_warning_excluded_forms())) {
    $form['admin_warning_message'] = array(
      '#type' => 'markup',
      '#prefix' => '<div>',
      '#value' => theme('admin_warning_message', filter_xss_admin(admin_warning_settings('admin_warning_message_text'))),
      '#suffix' => '</div>',
      // This should make it appear at the top of most forms (unless they
      // use drupal_render to display part of the form first?).
      '#weight' => -100000,
    );
  }
}

/**
 * Returns an array of form IDs for which the admin warning will not be
 * printed.
 */
function admin_warning_excluded_forms() {
  $excluded_form_text = admin_warning_settings('admin_warning_excluded_form_ids');
  // Adapted from profile.module.
  $excluded_form_lines = split("[,\n\r]", $excluded_form_text);
  $excluded_form_ids = array();
  foreach ($excluded_form_lines as $line) {
    $excluded_form_ids[] = $line;
  }
  return $excluded_form_ids;
}

/**
 * Helper function to store this module's variable_get() defaults all in one
 * place.
 */
function admin_warning_settings($variable_name) {
  switch($variable_name) {
    case 'admin_warning_message_text':
      $default_value = t('Warning: You are logged on to the live site as an administrator. Please think carefully about your changes before submitting this form.');
      break;
    case 'admin_warning_excluded_form_ids':
      $default_excluded_form_ids = array(
        // It is highly unlikely that the administrator can cause any damage
        // to the site by submitting the search form, so we exclude that by
        // default.
        'search_form',
        'search_block_form',
        'search_theme_form',
      );
      $default_value = implode("\r", $default_excluded_form_ids);
      break;
  }
  if (isset($default_value)) {
    return variable_get($variable_name, $default_value);
  }
}

/**
 * Implementation of hook_theme().
 */
function admin_warning_theme() {
  return array(
    'admin_warning_message' => array(
      'arguments' => array('message' => NULL),
      'file' => 'admin_warning.admin.inc',
    ),
    'admin_warning_help' => array(
      'arguments' => array('help_text' => NULL),
      'file' => 'admin_warning.admin.inc',
    ),
  );
}
