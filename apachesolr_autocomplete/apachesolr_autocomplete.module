<?php
// $Id: apachesolr_autocomplete.module,v 1.4 2009/12/04 20:43:21 janusman Exp $

/**
 * @file
 *   Alters search forms to suggest terms using Apache Solr.
 *   Thanks to robertDouglass who contributed some of the code.
 */
 
/**
 * Implementation of hook_init().
 */
function apachesolr_autocomplete_init() {
  drupal_add_css( drupal_get_path('module', 'apachesolr_autocomplete') .'/apachesolr_autocomplete.css');
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function apachesolr_autocomplete_form_search_form_alter(&$form, $form_state) {
  if ($form['module']['#value'] == 'apachesolr_search') {
    $form['basic']['inline']['keys']['#autocomplete_path'] = 'apachesolr_autocomplete';
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function apachesolr_autocomplete_form_search_block_form_alter(&$form, $form_state) {
  $form['search_block_form']['#autocomplete_path'] = 'apachesolr_autocomplete';
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function apachesolr_autocomplete_form_search_theme_form_alter(&$form, $form_state) {
  $form['search_theme_form']['#autocomplete_path'] = 'apachesolr_autocomplete';
}

/**
 * Implementation of hook_menu().
 */
function apachesolr_autocomplete_menu() {
  $items = array();

  $items['apachesolr_autocomplete'] = array(
    'page callback' => 'apachesolr_autocomplete_callback',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Callback for url apachesolr_autocomplete/autocomplete
 * @param query The user-entered query
 */
function apachesolr_autocomplete_callback($keys = '') {
  $suggestions = array();
  $suggestions = array_merge($suggestions, apachesolr_autocomplete_suggest_word_completion($keys, 5));
  $suggestions = array_merge($suggestions, apachesolr_autocomplete_suggest_additional_term($keys, 5));
  drupal_json($suggestions);
  exit;
}

/**
 * Implementation of hook_theme().
 */
function apachesolr_autocomplete_theme() {
  return array(
    'apachesolr_autocomplete_highlight' => array(
      'file' => 'apachesolr_autocomplete.module',
      'arguments' => array(
        'keys' => NULL,
        'suggestion' => NULL,
        'count' => NULL,
      ),
    ),
    'apachesolr_autocomplete_spellcheck' => array(
      'file' => 'apachesolr_autocomplete.module',
      'arguments' => array(
        'suggestion' => NULL,
      ),
    ),
  );
}

/**
 * Themes each returned suggestion.
 */
function theme_apachesolr_autocomplete_highlight($keys, $suggestion, $count = 0) {
  static $first = true;
  
  $html = '';
  $html .= '<div class="apachesolr_autocomplete suggestion">';
  $html .= '<strong>' . drupal_substr($suggestion, 0, strlen($keys)) . '</strong>' . drupal_substr($suggestion, strlen($keys));
  $html .= '</div>';
  if ($count) {
    if ($first) {
      $html .= "<div class='apachesolr_autocomplete message' style='float:right'>";
      $html .= t('!count results', array('!count' => $count));
      $html .= "</div><br style='clear:both'>";
      $first = false;
    } else {
      $html .= "<div class='apachesolr_autocomplete message count'>$count</div><br style='clear:both'>";
    }
  }
  return $html;
}

/**
 * Themes the spellchecker's suggestion.
 */
function theme_apachesolr_autocomplete_spellcheck($suggestion) {
  return '<span class="apachesolr_autocomplete message">' . t('Did you mean') .':</span> ' . $suggestion;
}

/**
 * Helper function that suggests ways to complete partial words.
 *
 * For example, if $keys = "learn", this might return suggestions like: 
 *    learn, learning, learner, learnability.
 * The suggested terms are returned in order of frequency (most frequent first).
 *
 */
function apachesolr_autocomplete_suggest_word_completion($keys, $suggestions_to_return = 5) {
  /**
   * Split $keys into two: 
   *  $first_part will contain all complete words (delimited by spaces). Can be empty.
   *  $last_part is the (assumed incomplete) last word. If this is empty, don't suggest.
   * Example:
   *  $keys = "learning dis" : $first_part = "learning", $last_part = "dis"
   */
  preg_match('/^(:?(.* |))([^ ]+)$/', $keys, $matches);
  $first_part = $matches[2];
  $last_part = $matches[3];
  if ($last_part == '') {
    return array();
  }
  // Ask Solr to return facets that begin with $last_part; these will be the suggestions.
  $params = array(
    'facet' => 'true',
    'facet.field' => array('spell'),
    'facet.prefix' => $last_part,
    'facet.limit' => $suggestions_to_return * 5,
    'facet.mincount' => 1,
    'start' => 0,
    'rows' => 0,
  );
  // Get array of themed suggestions.
  $result = apachesolr_autocomplete_suggest($first_part, $params, 'apachesolr_autocomplete_highlight', $keys, $suggestions_to_return);
  if ($result['suggestions']) {
    return $result['suggestions'];
  } else {
    return array();
  }
}

/**
 * Helper function that suggests additional terms to search for.
 *
 * For example, if $keys = "learn", this might return suggestions like: 
 *    learn student, learn school, learn mathematics.
 * The suggested terms are returned in order of frequency (most frequent first).
 */
function apachesolr_autocomplete_suggest_additional_term($keys, $suggestions_to_return = 5) {
  $keys = trim($keys);
  if ($keys == '') {
    return array();
  }
  
  // Ask Solr to return facets from the 'spell' field to use as suggestions.
  $params = array(
    'facet' => 'true',
    'facet.field' => array('spell'),
    // We ask for $suggestions_to_return * 5 facets, because we want 
    // not-too-frequent terms (will be filtered below). 5 is just my best guess.
    'facet.limit' => $suggestions_to_return * 5, 
    'facet.mincount' => 1,
    'start' => 0,
    'rows' => 0,
  );
  
  // Suggest using the spellchecker
  $spellcheck_suggestions = get_object_vars($result['response']->spellcheck->suggestions);
  if ($spellcheck_suggestions) {
    foreach($spellcheck_suggestions as $word => $value) {
      $replacements[$word] = $value->suggestion[0];
    }
    $new_keywords = strtr($keys, $replacements);
    $suggestions[$new_keywords] = theme('apachesolr_autocomplete_spellcheck', $new_keywords);
  }
  
  // Get array of themed suggestions.
  $result = apachesolr_autocomplete_suggest($keys, $params, 'apachesolr_autocomplete_highlight', $keys, $suggestions_to_return);
  if ($result['suggestions']) {
    $suggestions = $result['suggestions'];
  } else {
    $suggestions = array();
  }
  
  
  return $suggestions;
}


function apachesolr_autocomplete_suggest($keys, $params, $theme_callback, $orig_keys, $suggestions_to_return = 5) {
  $matches = array();
  $suggestions = array();
  $keys = trim($keys);

  // We need the keys array to make sure we don't suggest words that are already
  // in the search terms.
  $keys_array = explode(' ', $keys);
  $keys_array = array_filter($keys_array);
  
  // Query Solr for $keys so that suggestions will always return results.
  $query = apachesolr_drupal_query($keys);

  // Allow other modules to modify query.
  apachesolr_modify_query($query, $params, 'apachesolr_autocomplete');
  if (!$query) {
    return array();
  }
  $params += apachesolr_search_spellcheck_params($query);
  
  // Try to contact Solr.
  try {
    $solr = apachesolr_get_solr();
  }
  catch (Exception $e) {
    watchdog('Apache Solr', $e->getMessage(), NULL, WATCHDOG_ERROR);
    return array();
  }

  // Query Solr
  $response = $solr->search($keys, $params['start'], $params['rows'], $params);  
  foreach ($params['facet.field'] as $field) {
    foreach ($response->facet_counts->facet_fields->{$field} as $terms => $count) {
      // THIS DOESN'T SPLIT!!!!
      $term = preg_replace('/[_-]+/', ' ', $term);
      foreach (explode(' ', $terms)  as $term) {
        if ($term = trim(preg_replace('/['. PREG_CLASS_SEARCH_EXCLUDE .']+/u', '', $term))) {
          $matches[$term] += $count;
        }
      }
    }
  }
  
  if (sizeof($matches) > 0) {
    // Eliminate suggestions that are stopwords or are already in the query.
    $matches_clone = $matches;
    $stopwords = apachesolr_autocomplete_get_stopwords();
    foreach ($matches_clone as $term => $count) {
      if ((strlen($term) > 3) && !in_array($term, $stopwords) && !array_search($term, $keys_array)) {
        // Longer strings get higher ratings.
        #$matches_clone[$term] += strlen($term);
      }
      else {
        unset($matches_clone[$term]);
        unset($matches[$term]);
      }
    }
    
    // Don't suggest terms that are too frequent (in >90% of results).
    $max_occurence =  $response->response->numFound * 0.90;
    foreach ($matches_clone as $match => $count) {
      if ($count > $max_occurence) {
        unset($matches_clone[$match]);
      }
    }
    
    // The $count in this array is actually a score. We want the highest ones first.
    arsort($matches_clone);
    
    // Shorten the array to the right ones.
    $matches_clone = array_slice($matches_clone, 0, $suggestions_to_return, TRUE);
    
    // Add current search as suggestion if results > 0
    if ($response->response->numFound > 0 && $keys != '') {
      $suggestions[$keys] = theme('apachesolr_autocomplete_highlight', $keys, $keys, $response->response->numFound);
    }
    
    // Build suggestions using returned facets  
    foreach ($matches_clone as $match => $count) {
      if ($keys != $match) {
        $suggestion = trim($keys . ' ' . $match);
        // On cases where there are more than 3 keywords, omit displaying 
        //  the count because of the mm settings in solrconfig.xml
        if (substr_count($suggestion, ' ') >= 2) {
          $count = 0;
        }
        if ($suggestion != '') {
          $suggestions[$suggestion] = theme('apachesolr_autocomplete_highlight', $orig_keys, $suggestion, $count);
        }
      }
    }
  }
  
  return array(
    'suggestions' => $suggestions,
    'response' => &$response
  );
}

/**
 * Gets the current stopwords list configured in Solr.
 */
function apachesolr_autocomplete_get_stopwords() {
  static $words = array(), $flag = false;
  if ($flag) {
    return $words;
  }
  $stopwords_url = "/admin/file/?file=stopwords.txt";
  $host = variable_get('apachesolr_host', 'localhost');
  $port = variable_get('apachesolr_port', 8983);
  $path = variable_get('apachesolr_path', '/solr');
  $url = "http://{$host}:{$port}{$path}{$stopwords_url}";
  $result = drupal_http_request($url);
  if ($result->code != 200) {
    return array();
  }
  $words = array();
  foreach (explode("\n", $result->data) as $line) {
    if (drupal_substr($line, 0, 1) == "#") {
      continue;
    }
    if ($word = trim($line)) {
      $words[] = $word;
    }
  }
  $flag = true;
  return $words;
}
