<?php
// $Id: ajax_comments.module,v 1.1.2.13 2009/01/05 00:28:24 neochief Exp $

/*
 * Implementation of hook_form_alter()
 */
function ajax_comments_form_alter(&$form, $form_state, $form_id) {
  if (($form_id == 'comment_form') && (arg(1) != 'edit') && (arg(1) != 'reply') && (arg(2) != 'edit') && (arg(2) != 'reply')) {
    $form['#prefix'] = '<div id="comment-preview"></div>';
    
    // we should set specific ID to let ahah wrapper know what to wrap on ajax
    // loaded comment-form even if we have many submit buttons on the page
    $form['preview']['#id'] = "ajax-comments-preview";
    $form['preview']['#ahah'] = array(
      'path' => 'ajax_comments/js',
      'wrapper' => 'comment-preview',
      'event' => 'click',
      'method' => 'append',
      'effect' => 'ajaxCommentsPreview',
      'progress' => array('type' => '1bar', 'message' => t('Please wait...')),
    );
    
    $form['submit']['#id'] = "ajax-comments-submit";
    $form['submit']['#submit'] = array('ajax_comments_submit');
    $form['submit']['#ahah'] = array(
      'path' => 'ajax_comments/js',
      'wrapper' => 'comment-form-content',
      'event' => 'click',
      'method' => 'before',
      'effect' => 'ajaxCommentsSubmit',
      'progress' => array('type' => '1bar', 'message' => t('Please wait...')),
    );
    
    $path = drupal_get_path('module', 'ajax_comments');
    drupal_add_css($path .'/jquery.scrollTo.js');
    drupal_add_css($path .'/ajax_comments.css');
    
    drupal_add_js('misc/jquery.form.js');
    drupal_add_js($path .'/ajax_comments.js', 'module');
    drupal_add_js(array(
      'rows_in_reply' => variable_get('ajax_comments_reply_row_count', 3),
      'rows_default' => variable_get('ajax_comments_default_row_count', 5),
      'always_expand_main_form' => variable_get('ajax_comments_always_expand_form', TRUE),
    ), 'setting');
  }
}

/*
 * Implementation of hook_menu()
 */
function ajax_comments_menu() {
  $items['admin/settings/ajax_comments'] = array(
    'title' => 'AJAX comments',
    'description' => 'AJAXifies comments on site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('admin_ajax_comments'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
   );
  $items['ajax_comments/get_form_token/%/%'] = array(
    'page callback' => 'get_form_token',
    'page arguments' => array(2,3),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['ajax_comments/instant_delete/%'] = array(
    'page callback' => 'instant_delete',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('administer comments'),
    'type' => MENU_CALLBACK,
  );
  $items['ajax_comments/js'] = array(
    'page callback' => 'ajax_comments_js',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
   );
  return $items;
}


/*
 * AHAH callback
 */
function ajax_comments_js() {
  include_once 'modules/node/node.pages.inc';
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  $form = form_get_cache($form_build_id, $form_state);

  $args = $form['#parameters'];
  $form_id = array_shift($args);
  $form_state['post'] = $form['#post'] = $_POST;
  $form['#programmed'] = $form['#redirect'] = FALSE;

  $form['#after_build'] = array('comment_form_add_preview');
  drupal_process_form($form_id, $form, $form_state);
  
  $errors = form_get_errors();

  if (!$errors) {
    if ($form_state['values']['op'] == t('Preview')) {
      $output = '<div class="preview-item">'.$form['comment_preview']['#value'].'</div>';
    }
    elseif ($form_state['values']['op'] == t('Save')) {
      $output = '<div class="comment-new-success">'.$form_state['ajax_comment'].'</div>';
    }
    
    if ($output && $form_state['values']['pid']) {
      $output = '<div class="indented">'. $output .'<div>';
    }
    $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  }
  unset($form['#suffix']);
  unset($form['#prefix']);
  $output = theme('status_messages') . $output . drupal_render($form);

  drupal_json(array('status' => TRUE, 'data' => $output));
}

/*
 * Comment submit routine
 */
function ajax_comments_submit($form, &$form_state) {
  //remove self
  unset($form_state['submit_handlers']);
  // ..and standart comments submit handler
  foreach ($form['#submit'] as $key => $value) {
    if ($value == 'comment_form_submit') {
      unset($form['#submit'][$key]);
    }
  }
  //execute all others
  form_execute_handlers('submit', $form, $form_state);
  
  //save comment just like comments module do it
  $edit = $form_state['values'];
  _comment_form_submit($edit);
  if ($cid = comment_save($edit)) {
    $errors = form_get_errors();
    if (!$errors) {
      _comment_update_node_statistics($cid);
      $node = node_load($edit['nid']);

      $query = 'SELECT c.cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name, c.mail, c.homepage, u.uid, u.name AS registered_name, u.signature, u.picture, u.data, c.status FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d';
      $query_args = array($cid);
      if (!user_access('administer comments')) {
        $query .= ' AND c.status = %d';
        $query_args[] = COMMENT_PUBLISHED;
      }

      $query = db_rewrite_sql($query, 'c', 'cid');
      $result = db_query($query, $query_args);

      if ($comment = db_fetch_object($result)) {
        $comment->name = $comment->uid ? $comment->registered_name : $comment->name;
        $links = module_invoke_all('link', 'comment', $comment, 0);
        drupal_alter('link', $links, $node);

        //render our comment and get it back to AHAH handler
        $output .= theme('comment_view', $comment, $node, $links);
        $form_state['ajax_comment'] = $output;
      }
    }
  }
  return $output;
}


/*
 * AJAX comments settings form
 */
function admin_ajax_comments() {
  $form['ajax_comments_always_expand_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Form always expanded'),
    '#description' => t('This setting allows to render comments as collapsed link by default.'),
    '#default_value' => variable_get('ajax_comments_always_expand_form', FALSE),
  );
  $form['ajax_comments_default_row_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Default row count'),
    '#description' => t('Allows to control comment forms\' textarea size. Leave blank to use system defined.'),
    '#default_value' => variable_get('ajax_comments_default_row_count', 5),
  );
  $form['ajax_comments_reply_row_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Row count in replies'),
    '#description' => t('Usually, there is no need in big forms for replies, so this setting allows to reduce their size.'),
    '#default_value' => variable_get('ajax_comments_reply_row_count', 3),
  );
  return system_settings_form($form);
}

/*
 * Misc function to fetch new form and it's values when full reload needed
 */
function get_form_token($nid, $pid = NULL){
  drupal_set_header('Content-type: text/javascript; charset=utf-8');
  global $user;
  $uid = $user->uid;

  if ($pid == 0) $pid = NULL;

  $fs = array();
  $edit = array('nid' => $nid, 'cid' => $cid, 'pid' => $pid, 'uid' => $uid);
  print_r((drupal_get_form('comment_form', $edit, $title)));
  exit();
}

/*
 * Comments delete callback
 */
function instant_delete($cid = 0){
  drupal_set_header('Content-type: text/javascript; charset=utf-8');
  module_load_include('inc', 'comment', 'comment.admin');
  $comment = _comment_load($cid);
  // Delete comment and its replies.
  _comment_delete_thread($comment);
  _comment_update_node_statistics($comment->nid);
  // Clear the cache so an anonymous user sees that his comment was deleted.
  cache_clear_all();
  
  print('OK');
  exit();
}

/**
 * Process variables for comment.tpl.php.
 */
function ajax_comments_preprocess_comment(&$variables) {
  $comment = $variables['comment'];
  if (!$comment->cid) {
    $variables['new'] = t('preview');
    $variables['comment']->new = TRUE;
  }
}
