<?php
// $Id: ajax_comments.module,v 1.1.2.7 2008/12/22 15:12:22 neochief Exp $

/*
 * Implementation of hook_form_alter()
 */
function ajax_comments_form_alter( &$form, $form_state, $form_id ){
  if (($form_id == 'comment_form') && (arg(1) != 'edit')) {
    $form['#prefix'] = '<div id="comment-preview"></div>';

    if (!empty($_POST) && ($_POST['form_id'] == $form_id)) {
      // Redirect on successful submit, i.e., if there are no errors.
      $form['#pre_render'][] = 'ajax_comments_dispatch';
    }
    $form['#submit'] = array('ajax_comments_submit_dispatch' => array());
    $form['#redirect'] = FALSE;

    $path = drupal_get_path('module', 'ajax_comments');
    drupal_add_js('misc/jquery.form.js');
    drupal_add_js($path .'/ajax_comments.js', 'module');
    drupal_add_js(array(
      'cleanurls' => variable_get('clean_url', 0),
      'rows_in_reply' => variable_get('ajax_comments_reply_row_count', 3),
      'rows_default' => variable_get('ajax_comments_default_row_count', 5),
      'always_expand_form' => variable_get('ajax_comments_always_expand_form', TRUE),
    ), 'setting');
  }
}

/*
 * Implementation of hook_menu()
 */
function ajax_comments_menu() {
  $items['admin/settings/ajax_comments'] = array(
    'title' => 'AJAX comments',
    'description' => 'AJAXifies comments on site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('admin_ajax_comments'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
   );
  $items['get_form_token/%/%'] = array(
    'page callback' => 'get_form_token',
    'page arguments' => array(1,2),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['comment/instant_delete/%'] = array(
    'page callback' => 'instant_delete',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('administer comments'),
    'type' => MENU_CALLBACK,
  );
  $items['ajaxsubmit/dispatch'] = array(
    'page callback' => 'ajax_comments_dispatch',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
   );
  return $items;
}

function admin_ajax_comments() {
  $form['ajax_comments_always_expand_form'] = array(
    '#type' => 'checkbox',
    '#title' => t('Form always expanded'),
    '#description' => t('This setting allows to render comments as collapsed link by default.'),
    '#default_value' => variable_get('ajax_comments_always_expand_form', TRUE),
  );
  $form['ajax_comments_default_row_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Default row count'),
    '#description' => t('Allows to control comment forms\' textarea size. Leave blank to use system defined.'),
    '#default_value' => variable_get('ajax_comments_default_row_count', 5),
  );
  $form['ajax_comments_reply_row_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Row count in replies'),
    '#description' => t('Usually, there is no need in big forms for replies, so this setting allows to reduce their size.'),
    '#default_value' => variable_get('ajax_comments_reply_row_count', 3),
  );
  return system_settings_form($form);
}

/*
 * Misc function to fetch form tokens for authentificated users
 */
function get_form_token($nid, $pid = NULL){
  drupal_set_header('Content-type: text/javascript; charset=utf-8');
  global $user;
  $uid = $user->uid;

  if ($pid == 0) $pid = NULL;

  $fs = array();
  $edit = array('nid' => $nid, 'cid' => $cid, 'pid' => $pid, 'uid' => $uid);
  print_r((drupal_get_form('comment_form', $edit, $title)));
  exit();
}

/*
 * Comments delete callback
 */
function instant_delete($cid = 0){
  drupal_set_header('Content-type: text/javascript; charset=utf-8');
  module_load_include('inc', 'comment', 'comment.admin');
  $comment = _comment_load($cid);
  // Delete comment and its replies.
  _comment_delete_thread($comment);
  _comment_update_node_statistics($comment->nid);
  // Clear the cache so an anonymous user sees that his comment was deleted.
  cache_clear_all();
  
  print('OK');
  exit();
}

/*
 * Serves form submit functionality
 */
function ajax_comments_submit_dispatch($form_id, &$form_state) {
  global $user;

  $edit = $form_state['values'];
  _comment_form_submit($edit);
  if ($cid = comment_save($edit)) {
    $errors = form_get_errors();
    if (!$errors) {
      $node = node_load($edit['nid']);

      $query = 'SELECT c.cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name, c.mail, c.homepage, u.uid, u.name AS registered_name, u.signature, u.picture, u.data, c.status FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d';
      $query_args = array($cid);
      if (!user_access('administer comments')) {
        $query .= ' AND c.status = %d';
        $query_args[] = COMMENT_PUBLISHED;
      }

      $query = db_rewrite_sql($query, 'c', 'cid');
      $result = db_query($query, $query_args);

      if ($comment = db_fetch_object($result)) {
        $comment->name = $comment->uid ? $comment->registered_name : $comment->name;
        $links = module_invoke_all('link', 'comment', $comment, 0);
        drupal_alter('link', $links, $node);

        $preview .= theme('comment_view', $comment, $node, $links);
      }

      if ($comment->pid) {
        $preview = '<div class="indented">'.$preview.'<div>';
      }

      $redirect = drupal_get_path_alias('node/'.$comment->nid).'?r'.$cid.'#comment-'.$cid;
    }

    $result = array(
      'status' => TRUE,
      'data' =>  array(
        'errors' => $errors,
        'message' => theme('status_messages'),
        'preview' => $preview,
        'destination' => $redirect
      )
    );
    return $result;
  }
}

/*
 * Serves previews and validation
 */
function ajax_comments_dispatch(&$form) {
  if (module_exists('captcha')) {
    $form_c = array();
    captcha_form_alter($form_c, NULL, 'comment_form');
    captcha_pre_render($form_c);

    $form_c['captcha']['captcha_token']['#id'] = 'edit-captcha-token';
    $form_c['captcha']['captcha_response']['#id'] = 'edit-captcha-response';
    $form_c['captcha']['captcha_token']['#name'] = 'captcha_token';
    $form_c['captcha']['captcha_response']['#name'] = 'captcha_response';

    $captcha = @drupal_render($form_c);
  }
  
  $errors =  form_get_errors();

  if ((!$errors) && (empty($form['comment_preview']))) {
    $form_state = array();
    drupal_process_form('comment_form', $form, $form_state);
    $result = ajax_comments_submit_dispatch('comment_form', $form_state);
    print drupal_to_js($result);
    exit();
  }
  
  $result = array(
    'status' => TRUE,
    'data' =>  array(
      'errors' => $errors,
      'message' => theme('status_messages'),
      'preview' => isset($form['comment_preview']) && !empty($form['comment_preview']['#value']) ? $form['comment_preview']['#value'] : NULL,
      'submit' => isset($form['submit']) && !empty($form['submit']) ? drupal_render($form['submit']) : NULL,
      'destination' => '',
      'captcha' => $captcha,
    )
  );
  
  print drupal_to_js($result);
  exit();
}

/**
 * Process variables for comment.tpl.php.
 */
function ajax_comments_preprocess_comment(&$variables) {
  $comment = $variables['comment'];
  if (!$comment->cid) {
    $variables['new'] = t('preview');
    $variables['comment']->new = TRUE;
  }
}



