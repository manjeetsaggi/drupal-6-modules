<?php
// $Id: apachesolr_rdf.test,v 1.1.2.1 2009/08/15 00:56:23 drunkenmonkey Exp $

define('APACHESOLR_RDF_TEST_CONTEXT', 'test://example.com/rdf/');
define('APACHESOLR_RDF_TEST_URI', 'test://example.com/rdf/#foo');

/**
 * TestCase class for testing the indexing and search capabilities of the
 * apachesolr_rdf module. For this to produce any results, at least one server
 * has to be defined and enabled.
 */
class DrupalSolrRdfIndexSearchTestCase extends DrupalWebTestCase {
  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => 'RDF Indexing/Searching',
      'description' => 'Indexes some resources and then searches for them.',
      'group' => 'ApacheSolr',
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    $this->servers = array();
    foreach (_apachesolr_rdf_servers(TRUE) as $server) {
      $this->servers[$server['schema']] = $server;
    }
    parent::setUp('apachesolr_rdf');
    module_load_include('admin.inc', 'apachesolr_rdf');
    module_load_include('index.inc', 'apachesolr_rdf');
    module_load_include('pages.inc', 'apachesolr_rdf');
  }

  /**
   * Tests an enabled server of every available schema.
   */
  function testServers() {
    foreach ($this->servers as $server) {
      $this->_testServer($server);
    }
  }

  /**
   * Tests indexing and searching on one server.
   */
  function _testServer($server) {
    // Check server status
    $ping = apachesolr_rdf_server_status($server['host'], $server['port'],
        $server['path']);
    $this->assertTrue($ping, t('The server "@name" has to be available.',
        array('@name' => $server['name'])));
    if (!$ping) {
      return;
    }

    $solr = apachesolr_get_solr($server['host'], $server['port'],
        $server['path']);
    $schema = apachesolr_rdf_schema_load($server['schema']);

    //Create an index for this server
    $index = $this->_createIndex($server);
    $this->assertTrue($index, t('Index created successfully?'));
    if (!$index) {
      return FALSE;
    }

    // Prepare create_document method
    $create_document = _apachesolr_rdf_get_schema_function(
        'create_document', $schema['id']);
    $this->assertTrue($create_document, t('@function found for schema @schema?',
        array('@function' => 'create_document', '@schema' => $schema['name'])));
    if (!$create_document) {
      return FALSE;
    }

    // Add document
    $uri = APACHESOLR_RDF_TEST_URI;
    $predicates = array(
      'foo' => new RDF_URIRef(APACHESOLR_RDF_TEST_CONTEXT . '#bar'),
      'quote' => new RDF_Literal('I can see dead people.'),
    );
    $doc = $create_document($uri, $predicates, $index);
    $success = !($doc && $doc instanceof Apache_Solr_Document);
    $this->assertTrue($success, t('Valid document created?'));
    if (!$success) {
      return FALSE;
    }
    $solr->addDocument($doc);
    $solr->commit();

    // Create a search for this server
    $search = $this->_createSearch($server);
    $this->assertTrue($search, t('Search created successfully?'));
    if (!$search) {
      return FALSE;
    }

    // Prepare create_document method
    $execute_search = _apachesolr_rdf_get_schema_function(
        'execute_search', $schema['id']);
    $this->assertTrue($execute_search, t('@function found for schema @schema?',
        array('@function' => 'execute_search', '@schema' => $schema['name'])));
    if (!$execute_search) {
      return FALSE;
    }

    // Search for the indexed document
    // TODO: Make this even less dependent on the schema used.
    $result = $execute_search($search, 'index:' . $index['id'], array(), '', 0);
    $result_count = substr_count($result, '<dt class="title">');
    $this->assertEqual($result_count, 1, t('Correct number of resources ' .
        'indexed.'));

    $result = $execute_search($search, 'dead index:' . $index['id'], array(),
        '', 0);
    $result_count = substr_count($result, '<dt class="title">');
    $this->assertEqual($result_count, 1, t('Correct number of resources ' .
        'found with search.'));

    // Delete index and try search again
    apachesolr_rdf_delete_index($index['id']);

    $result = $execute_search($search, 'index:' . $index['id'], array(), '', 0);
    $result_count = substr_count($result, '<dt class="title">');
    $this->assertEqual($result_count, 0, t('Index successfully deleted.'));
  }

  /**
   * Creates an index on the specified server and returns its info array.
   */
  function _createIndex($server) {
    $values['enabled'] = TRUE;
    $values['cron_limit'] = 50;
    $values['context'] = APACHESOLR_RDF_TEST_CONTEXT;
    $values['action'] = 'add';
    $values['server'] = $server['id'];
    $values['schema'] = $server['schema'];
    $values['op'] = t('Add index');

    $form_state['values'] = $values;
    $form_state['storage']['server'] = $server['id'];

    drupal_execute('apachesolr_rdf_settings_index_edit', $form_state);

    $id = db_last_insert_id('apachesolr_rdf_indexes', 'id');
    $this->pass($id);
    $index = apachesolr_rdf_index_load($id);
    $this->pass(print_r($index, TRUE));
    return $index;
  }

  /**
   * Creates a search on the specified server and returns its info array.
   */
  function _createSearch($server) {
    $values['enabled'] = TRUE;
    $values['permission'] = 'access RDF data';
    $values['action'] = 'add';
    $values['server'] = $server['id'];
    $values['schema'] = $server['schema'];
    $values['op'] = t('Add search');

    $form_state['values'] = $values;
    $form_state['storage']['server'] = $server['id'];

    drupal_execute('apachesolr_rdf_settings_search_edit', $form_state);

    $id = db_last_insert_id('apachesolr_rdf_searches', 'id');
    return apachesolr_rdf_search_load($id);
  }
}
