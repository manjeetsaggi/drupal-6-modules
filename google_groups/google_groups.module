<?php
// $Id: google_groups.module,v 1.1 2008/05/24 07:41:11 dragonwize Exp $

ini_set('display_errors', true);

/**
* Valid permissions for this module
* @return array An array of valid permissions for the google_groups module
*/
function google_groups_perm() {
  return array('administer google groups');
}


/**
 * Implementation of hook_menu()
 */
function google_groups_menu() {
  $items = array();
  $items['admin/settings/googlegroups'] = array(
    'title' => t('Google Groups'),
    'description' => t('Google Groups module settings.'),
    'access arguments' => array('administer google groups'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('google_groups_admin_form'),
    'type' => MENU_NORMAL_ITEM,
   );
  return $items;
}

/**
 * Administration form
 * @return array
 */
function google_groups_admin_form() {
  $form['google_groups_group_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Group Name'),
    '#default_value' => variable_get('google_groups_group_name', ''),
    '#required' => TRUE,
    '#size' => 30,
    '#maxlength' => 100,
    '#description' => t('Your Google Group\'s human readable name.'),
  );
  $form['google_groups_group'] = array(
    '#type' => 'textfield',
    '#title' => t('Group Email'),
    '#default_value' => variable_get('google_groups_group', ''),
    '#required' => TRUE,
    '#size' => 30,
    '#maxlength' => 64,
    '#description' => t('Your Google Group\'s email address.'),
    '#field_suffix' => '<span class="google-groups-email-domain">@googlegroups.com</span>',
  );
  $form['register'] = array(
    '#type' => 'fieldset',
    '#title' => t('Registration Form'),
    '#description' => t('Options for subscribing via the registration form.'),
  );
  $form['register']['google_groups_setting_register'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow subscription during registration'),
    '#default_value' => variable_get('google_groups_setting_register', 0),
    '#description' => t('This will add a subscription checkbox to the registration form.'),
  );
  $form['register']['google_groups_setting_register_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Checked by default'),
    '#default_value' => variable_get('google_groups_setting_register_default', 0),
    '#description' => t('If checked, the subscription checkbox on the registration form will be checked by default.'),
  );
  $form['register']['google_groups_setting_register_default_forced'] = array(
    '#type' => 'checkbox',
    '#title' => t('Force default'),
    '#default_value' => variable_get('google_groups_setting_register_default_forced', 0),
    '#description' => t('If checked, the subscription checkbox on the registration form will be disabled. User will not be able to change it from its default setting. Useful to force user subscription.'),
  );

  return system_settings_form($form);
}


/* ******************************  Blocks  ************************************/

/**
* Generate HTML for the google_groups block
* @param op the operation from the URL
* @param delta offset
* @returns block HTML
*/
function google_groups_block($op = 'list', $delta = 0) {
  switch ($op) {
    case 'list':
      return google_groups_block_list();
    
    case 'configure':
    case 'save':
      // no additional configuration options
      break;
    
    case 'view':
    default:
      $block['subject'] = '<none>';
      $block['content'] = theme('google_groups_block' . $delta . '_content');
      return $block;
  }
}

/**
 * Returns a list of blocks in a form suitable for hook_block() when $op == list:
 */
function google_groups_block_list() {
  $blocks = array();
  $blocks[0]['info'] = t('Google Groups Block');
  return $blocks;
}

/**
 * Implementation of hook_theme()
 */
function google_groups_theme() {
  return array(
    'google_groups_block0_content' => array(
      'template' => 'google-groups-subscribe-form-block',
      'arguments' => array(),
    ),
  );
}

/**
 * template preprocesser
 */
function template_preprocess_google_groups_block0_content(&$variables) {
  $variables['group'] = variable_get('google_groups_group', '');
  $variables['group_name'] = variable_get('google_groups_group_name', '');
}


/* ****************  Registration and Account Settings  ***********************/

/**
 * Implementation of hook_user().
 */
function google_groups_user($op, &$edit, &$account, $category = NULL) {
  global $user;
  switch ($op) {
    case 'register':
      // The user account registration form is about to be displayed. The module 
      // should present the form elements it wishes to inject into the form.
      return google_groups_user_register_form();
      break;
      
    case 'insert':
      // The user account is being added. The module should save its custom 
      // additions to the user object into the database and set the saved fields 
      // to NULL in $edit.
      return google_groups_user_register_submit($edit);
      break;
    
    case 'view':
      // todo: add user ability to control subscription from account edit
      // The user's account information is being displayed. The module should 
      // format its custom additions for display, and add them to the 
      // $account->content array.
      break;
    
    case 'form':
      // todo: add user ability to control subscription from account edit
      // The user account edit form is about to be displayed. The module should 
      // present the form elements it wishes to inject into the form.
      break;

    case 'update':
      // todo: add user ability to control subscription from account edit
      // The user account is being changed. The module should save its custom 
      // additions to the user object into the database and set the saved fields 
      // to NULL in $edit.
      break;
      
    case 'delete':
      // The user account is being deleted. The module should remove its custom 
      // additions to the user object from the database.
      // do nothing data is stored in user table
      break;

    default:
  }
}

function google_groups_user_register_form() {
  $form = array();
  if (variable_get('google_groups_setting_register', FALSE)) {
    $form['google_groups_subscribe'] = array(
      '#type' => 'checkbox',
      '#title' => t('Subscribe to our email list'),
      '#weight' => 10,
    );
    
    if (variable_get('google_groups_setting_register_default', NULL)) {
      $form['google_groups_subscribe']['#default_value'] = 1;
    }
    
    if (variable_get('google_groups_setting_register_default_forced', FALSE)) {
      $form['google_groups_subscribe']['#type'] = 'hidden';
    }
  }
  return $form;
}

function google_groups_user_register_submit(&$edit) {
  // if google_groups_subscribe is checked
  // store in $user->data and send subscription email
  if ($edit['google_groups_subscribe']) {
    $group = variable_get('google_groups_group', '');
    // send subscription email
    if (google_groups_mail($group, $edit['mail'])) {
      drupal_set_message('You will be receiving a confirmation email for our email list.', 'status');
    } else {
      $message = 'An error sending a subscription email occurred and user was NOT subscribed to our email list.';
      watchdog('error', $message, array(), WATCHDOG_WARNING);
      drupal_set_message('An error occurred and you were NOT subscribed to our email list.', 'warning');
    }
  }
  
  $edit['google_groups_subscribe'] = NULL;
}


/* ***********************  Module Functions  *********************************/


function google_groups_mail($group, $from, $op = 'subscribe') {
  // default headers
  $headers = array(
    'From'                      => $from,
    'MIME-Version'              => '1.0',
    'Content-Type'              => 'text/plain; charset=UTF-8; format=flowed; delsp=yes',
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer'                  => 'Drupal',
  );
  
  $message = array(
    'id'       => 'google_groups_' . $op,
    'to'       => $group . '-' . $op . '@googlegroups.com',
    'subject'  => $op,
    'body'     => drupal_wrap_mail($op),
    'headers'  => $headers,
  );
  
  return drupal_mail_send($message);
}
