<?php
// $Id: syntaxhighlighter.module,v 1.12 2009/07/28 20:36:42 mattyoung Exp $

/**
 * @file
 * Add syntax highlighter javascript to pages
 *
 * Adds the required Javascript files
 * to enable code list syntax highlight.
 
 * See http://alexgorbatchev.com/wiki/SyntaxHighlighter
 *
 * @author: Matthew Young <www.hddigitalworks.com/contact>
 */

function syntaxhighlighter_menu() {
  $items['admin/settings/syntaxhighlighter'] = array(
    'title' => 'Syntax highlighter',
    'description' => 'Configure syntax highlighter',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('syntaxhighlighter_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'syntaxhighlighter.admin.inc',
  );
  
  return $items;
}


function syntaxhighlighter_help($path, $arg) {
  switch ($path) {
    case 'admin/help#syntaxhighlighter':
      return syntaxhighlighter_filter_tips(0, 0, TRUE);
  }
}


function syntaxhighlighter_init() {
  //
  // Fix a javascript compability issue with imce reported by gmark
  // Don't inject syntax highlighter javascript on "off pages"
  // 
  // Code lifted from the block module
  $off_pages = variable_get('syntaxhighlighter_off_pages', "admin\nadmin/*\nuser\nuser/*\nimce\nimce/*\n");
  $path = drupal_get_path_alias($_GET['q']);
  // Compare with the internal and path alias (if any).
  $page_match = drupal_match_path($path, $off_pages);
  if ($path != $_GET['q']) {
    $page_match = $page_match || drupal_match_path($_GET['q'], $off_pages);
  }
  if ($page_match) {
    return;
  }
  
  $syntaxhighlighter_js_location = _syntaxhighlighter_get_js_location();
  $styles_path = $syntaxhighlighter_js_location .'/styles/';
  drupal_add_css($styles_path .'shCore.css', 'module');
  $theme = variable_get('syntaxhighlighter_theme', 'shThemeDefault.css');
  drupal_add_css($styles_path . $theme, 'module');

  $scripts_path = $syntaxhighlighter_js_location .'/scripts/';
  drupal_add_js($scripts_path .'shCore.js', 'module');
  if (variable_get('syntaxhighlighter_legacy_mode', 0)) {
    drupal_add_js($scripts_path .'shLegacy.js', 'module');
  }
  $enabled_languages = variable_get('syntaxhighlighter_enabled_languages', array('shBrushPhp.js'));
  foreach ($enabled_languages as $lang) {
    if (!empty($lang)) {
      drupal_add_js($scripts_path . $lang, 'module');
    }
  }
  $tag_name = variable_get('syntaxhighlighter_tagname', 'pre');
  if ($tag_name !== 'pre') {
    $code[] = "SyntaxHighlighter.config.tagName = '$tag_name';";
  }
  
  $code[] = 'SyntaxHighlighter.config.strings.expandSource = "'. t('+ expand source') .'";';
  $code[] = 'SyntaxHighlighter.config.strings.viewSource = "'. t('view source') .'";';
  $code[] = 'SyntaxHighlighter.config.strings.copyToClipboard = "'. t('copy to clipboard') .'";';
  $code[] = 'SyntaxHighlighter.config.strings.copyToClipboardConfirmation = "'. t('The code is in your clipboard now') .'";';
  $code[] = 'SyntaxHighlighter.config.strings.print = "'. t('print') .'";';
  $code[] = 'SyntaxHighlighter.config.strings.help = "'. t('?') .'";';
  $code[] = 'SyntaxHighlighter.config.strings.alert = "'. t('SyntaxHighlighter\n\n') .'";';
  $code[] = 'SyntaxHighlighter.config.strings.noBrush = "'. t('Can\'t find brush for: ') .'";';
  $code[] = 'SyntaxHighlighter.config.strings.brushNotHtmlScript = "'. t('Brush wasn\'t made for html-script option: ') .'";';
  
  $code[] = "SyntaxHighlighter.config.clipboardSwf = '/$scripts_path"."clipboard.swf';";
  
  $code[] = variable_get('syntaxhighlighter_default_expressions', '');
  
  $code[] = 'jQuery(function ($) {';
  $code[] = "  SyntaxHighlighter.highlight();";
  if (variable_get('syntaxhighlighter_legacy_mode', 0)) {
    $code[] = "  dp.SyntaxHighlighter.HighlightAll('code');";
  }
  $code[] = '});';
  drupal_add_js(join("\n", $code), 'inline');
}


function syntaxhighlighter_filter_tips($delta, $format, $long = FALSE) {
  $tag_name = variable_get('syntaxhighlighter_tagname', 'pre');
  return $long ?
      '<p>'. t('Syntax highlight code surrounded by the <code>!ex0</code> tags, where LANG is a language alias, optionally followed by parameters separated by \';\'.', 
               array('!ex0' => "&lt;$tag_name class=\"brush: LANG\"&gt;...&lt;/$tag_name&gt;")) .'</p>'.
      '<p>'. t('Example: <code>!ex1</code> syntax highlights PHP code, initially collapsed, start line number at 50.',
               array('!ex1' => "&lt;$tag_name class=\"brush:php;collapse:true;first-line:50\"&gt;...&lt;/$tag_name&gt;")) .'</p>'.
      '<p>'. t('See <a href="!url0">usage</a>, <a href="!url1">language aliases</a> and <a href="!url2">options</a> for additional helps.',
               array('!url0' => 'http://alexgorbatchev.com/wiki/SyntaxHighlighter:Usage#Adding_code_blocks',
                     '!url1' => 'http://alexgorbatchev.com/wiki/SyntaxHighlighter:Brushes#About',
                     '!url2' => 'http://alexgorbatchev.com/wiki/SyntaxHighlighter:Configuration#SyntaxHighlighter.defaults')) .'</p>'
    : t('Syntax highlight code surrounded by the <code>!ex0</code> tags. See <a href="@filter_tips_path">here</a> for details.',
         array('!ex0' => "&lt;$tag_name class=\"brush: LANG\"&gt;...&lt;/$tag_name&gt;", '@filter_tips_path' => url('filter/tips')));
}


function syntaxhighlighter_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('Syntax Highlighter'));

    case 'description':
      return syntaxhighlighter_filter_tips(0, 0, FALSE);

      // We don't actually do filtering on the server side, caching is no problem
    case 'no cache':
      return FALSE;

    // do nothing
    case 'prepare':
    case 'process':
    default:
      return $text;
  }
}



/**
 * Allow the syntaxhighlighter js library to be installed in:
 *   1) sites/default/files          (can be inside sub directory)
 *   2) sites/<site_domain>/files    (can be insdie sub directory)
 *   3) <module>/syntaxhighlighter
 *   
 * @return the directory path where the syntaxhighlighter js lib is installed, NULL if not found
 */
function _syntaxhighlighter_get_js_location() {
  $directories = array(
    'sites/all/libraries',
    file_directory_path(),
    drupal_get_path('module', 'syntaxhighlighter'),
  );
  foreach ($directories as $d) {
    foreach (file_scan_directory($d, 'shCore\.js$', array('.', '..', 'CVS', 'src')) as $filename => $file_info) {
      return substr($filename, 0, -18);    // the path to syntaxhighlighter lib, (-18 to chop off "/scripts/shCore.js" at the end
    }
  }
  return NULL;
}

