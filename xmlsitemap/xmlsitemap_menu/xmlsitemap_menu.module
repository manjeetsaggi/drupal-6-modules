<?php
// $Id: xmlsitemap_menu.module,v 1.1.4.27 2009/03/11 12:51:30 kiam Exp $

/**
 * @file
 * Adds menu items to the site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_xmlsitemap_description().
 */
function xmlsitemap_menu_xmlsitemap_description() {
  return '<dt>'. t('XML Sitemap: Menu') .'</dt>'.
    '<dd>'. t('The module allows menu items to be added to the site map. You can choose the menus to include on the XML Sitemap administration page and can add and remove menu items on the <a href="@menu">menu administration</a> page. The priority of a menu item is determined by its weight.', array('@menu' => url('admin/build/menu'))) .'</dd>';
}

/**
 * Implementation of hook_xmlsitmap_links().
 */
function xmlsitemap_menu_xmlsitemap_links($modules) {
  if (isset($modules['xmlsitemap']) || isset($modules['xmlsitemap_menu'])) {
    db_query("DELETE FROM {xmlsitemap} WHERE type ='menu'");
    $menus = variable_get('xmlsitemap_menu_menus', array());
    $mlid = 0;
    foreach ($menus as $menu) {
      if (is_string($menu)) {
        $result = db_query("SELECT ml.mlid
          FROM {menu_links} ml
          LEFT JOIN {menu_router} m ON m.path = ml.router_path
          WHERE  ml.menu_name = '%s'
            AND ml.mlid > %d
          ORDER BY ml.mlid ASC",
          $menu, $mlid
        );
        $row = new stdClass();
        $row->module = 'xmlsitemap_menu';
        $row->type = 'menu';
        while ($mlid = db_result($result)) {
          $link = menu_link_load($mlid);
          // Avoid external links, or links to the front page;
          // both have $link['external'] set to 1.
          if (!$link['external'] && !$link['hidden'] && $link['access'] == 1) {
            $row->loc = $link['href'];
            $row->id = $mlid;
            $row->priority = 1.0 - min(max(round(($link['weight'] + 10) / 20, 1), 0.0), 1.0);
            if (db_result(db_query("SELECT loc FROM {xmlsitemap} WHERE loc = '%s'", $row->loc)) != $row->loc) {
              drupal_write_record('xmlsitemap', $row);
            }
          }
        }
      }
    }
  }
}

/**
 * Implementation of hook_xmlsitemap_sitemap_settings_alter().
 */
function xmlsitemap_menu_xmlsitemap_sitemap_settings_alter(&$form) {
  $opts = array();
  $result = db_query("SELECT menu_name, title FROM {menu_custom}");
  while ($menu = db_fetch_array($result)) {
    $opts[$menu['menu_name']] = empty($menu['title']) ? $menu['menu_name'] : $menu['title'];
  }
  $default_values = variable_get('xmlsitemap_menu_menus', array());
  // If a menu is not present, remove it from the default settings.
  foreach ($default_values as $opt) {
    if (!isset($opts[$opt])) {
      unset($default_values[$opt]);
    }
  }
  if (!empty($opts)) {
    $form['xmlsitemap_menu'] = array(
      '#type' => 'fieldset',
      '#title' => t('Menu settings'),
      '#description' => t('The settings for the menus to include in the site map.'),
      '#collapsible' => TRUE,
      '#weight' => 0,
    );
    $form['xmlsitemap_menu']['xmlsitemap_menu_menus'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Menus to include in the site map'),
      '#default_value' => $default_values,
      '#options' => $opts,
      '#checkall' => TRUE,
    );
  }
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
