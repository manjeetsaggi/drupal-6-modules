<?php
// $Id: xmlsitemap_node.module,v 1.19.2.34 2009/02/06 00:02:30 kiam Exp $

/**
 * @file
 * Adds nodes to the site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_comment().
 */
function xmlsitemap_node_comment($comment, $op) {
  $comment = (object) $comment;
  switch ($op) {
    case 'insert':
    case 'update':
    case 'moderate':
    case 'delete':
      db_query("UPDATE {xmlsitemap_node} SET previous_comment = last_comment, last_comment = %d WHERE nid = %d",
        array(
          $comment->timestamp,
          $comment->nid,
        )
      );
      if (variable_get('xmlsitemap_node_count_comments', TRUE)) {
        xmlsitemap_update_sitemap();
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_node_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']) && $form_id == $form['type']['#value'] .'_node_form') {
    $node = $form['#node'];
    if (user_access('override node priority')) {
      $form['xmlsitemap_node'] = array(
        '#type' => 'fieldset',
        '#title' => t('XML site map'),
        '#collapsible' => TRUE,
        '#weight' => 30,
      );
      $options = xmlsitemap_priority_options('both');
      $default = variable_get('xmlsitemap_node_type_priority_'. $node->type, '0.5');
      $form['xmlsitemap_node']['priority_override'] = array(
        '#type' => 'select',
        '#title' => t('Priority'),
        '#description' => t('The default priority is %priority.', array('%priority' => $options[$default])),
        '#default_value' => $node->priority_override,
        '#options' => $options,
      );
    }
    else {
      $form['priority_override'] = array(
        '#type' => 'value',
        '#value' => $node->priority_override
      );
    }
    $form['xmlsitemap_node_status'] = array(
      '#type' => 'value',
      '#value' => $node->status
    );
  }
  else {
    switch ($form_id) {
      case 'node_type_form':
        if (isset($form['identity']['type'])) {
          $form['xmlsitemap_node'] = array(
            '#type' => 'fieldset',
            '#title' => t('XML site map'),
            '#collapsible' => TRUE,
          );
          $form['xmlsitemap_node']['xmlsitemap_node_type_priority'] = array(
            '#type' => 'select',
            '#title' => t('Priority adjustment'),
            '#description' => t('This number will be added to the priority of this content type.'),
            '#default_value' => variable_get('xmlsitemap_node_type_priority_'. $form['#node_type']->type, 0.5),
            '#options' => xmlsitemap_priority_options('exclude'),
          );
          $form['xmlsitemap_node']['xmlsitemap_old_priority'] = array(
            '#type' => 'value',
            '#value' => variable_get('xmlsitemap_node_type_priority_'. $form['#node_type']->type, 0.5)
          );
          $form['#submit'][] = 'xmlsitemap_node_type_submit';
        }
        break;
    }
  }
}

/**
 * Implementation of hook_node_type().
 */
function xmlsitemap_node_node_type($op, $info) {
  if ($op == 'delete') {
    variable_del('xmlsitemap_node_type_priority_'. $info->type);
  }
  elseif ($op == 'update' && !empty($info->old_type) && $info->type != $info->old_type) {
    variable_set('xmlsitemap_node_type_priority_'. $info->type, variable_get('xmlsitemap_node_type_priority_'. $info->old_type, 0.5));
    variable_del('xmlsitemap_node_type_priority_'. $info->old_type);
  }
  xmlsitemap_update_sitemap();
}

/**
 * Implementation of hook_nodeapi().
 */
function xmlsitemap_node_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'prepare':
      $priority_override = db_result(db_query("SELECT priority_override
        FROM {xmlsitemap_node} WHERE nid = %d",
        $node->nid)
      );
      $node->priority_override = $priority_override !== FALSE ? $priority_override : -2.0;
      break;
    case 'insert':
      db_query("INSERT INTO {xmlsitemap_node} (nid, changed, priority_override) VALUES (%d, %d, %s)",
        array(
          $node->nid,
          $node->changed,
          isset($node->priority_override) ? $node->priority_override : -2.0,
        )
      );
      if ($node->status) {
        xmlsitemap_update_sitemap();
      }
      break;
    case 'update':
      db_query("UPDATE {xmlsitemap_node}
        SET previously_changed = changed, changed = %d, priority_override = %s
        WHERE nid = %d",
        array(
          $node->changed,
          isset($node->priority_override) ? $node->priority_override : -2.0,
          $node->nid
        )
      );
      if ($node->status || $node->xmlsitemap_node_status) {
        xmlsitemap_update_sitemap();
      }
      break;
    case 'delete':
      db_query("DELETE FROM {xmlsitemap_node} WHERE nid = %d", $node->nid);
      if ($node->status) {
        xmlsitemap_update_sitemap();
      }
      break;
  }
}

/**
 * Implementation of hook_perm().
 */
function xmlsitemap_node_perm() {
  return array('override node priority');
}

/**
 * Implementation of hook_xmlsitemap_description().
 */
function xmlsitemap_node_xmlsitemap_description() {
  return '<dt>'. t('XML Sitemap: Node') .'</dt>'.
    '<dd>'. t('<em>XML Sitemap: Node</em> adds nodes (content) to the site map. The default priority of a node is determined by a combination of its <a href="@content">content type</a> priority, whether it appears on the front page of your site, and the number of comments it has received. You can override the default priority for individual nodes when you add or edit a node.', array('@content' => url('admin/content/types'))) .'</dd>';
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_node_xmlsitemap_links() {
  $excludes = xmlsitemap_node_excludes();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $coalesce = 'COALESCE';
      break;
    case 'pgsql':
      $coalesce = 'FIRST';
      break;
  }
  if (module_exists('comment')) {
    $columns = 'n.nid, n.type, n.promote, xn.changed, xn.previously_changed, xn.priority_override, s.comment_count, s.last_comment_timestamp, xn.previous_comment';
    $left_join = "LEFT JOIN {node_comment_statistics} s ON n.nid = s.nid";
  }
  else {
    $columns = 'n.nid, n.type, n.promote, xn.changed, xn.previously_changed, xn.priority_override';
    $left_join = '';
  }
  $query = "SELECT $columns, $coalesce(ua.dst) AS alias FROM {node} n
    LEFT JOIN {xmlsitemap_node} xn ON n.nid = xn.nid
    $left_join
    LEFT JOIN {url_alias} ua ON ua.src = CONCAT('node/', n.nid)
    WHERE n.status > 0
      AND n.type NOT IN (". db_placeholders($excludes, 'varchar') .")
      AND (xn.priority_override = -2 OR xn.priority_override >= 0)
      AND n.nid <> %d
    GROUP BY $columns";
  $nid = 0;
  $frontpage = explode('/', drupal_get_normal_path(variable_get('site_frontpage', 'node')));
  if (count($frontpage) == 2 && $frontpage[0] == 'node' && is_numeric($frontpage[1])) {
    $nid = $frontpage[1];
  }
  $query_args = array_merge($excludes, array($nid));
  $result = db_query(db_rewrite_sql($query), $query_args);
  while ($node = db_fetch_object($result)) {
    db_query("INSERT INTO {xmlsitemap} (loc, lastmod, changefreq, priority) VALUES ('%s', %d, %d, %f)",
      array(
        xmlsitemap_url('node/'. $node->nid, $node->alias, NULL, NULL, TRUE),
        variable_get('xmlsitemap_node_count_comments', TRUE) ? max($node->changed, $node->last_comment_timestamp) : $node->changed,
        xmlsitemap_node_frequency($node), xmlsitemap_node_priority($node),
      )
    );
  }
}

/**
 * Implementation of hook_xmlsitemap_sitemap_settings_alter().
 */
function xmlsitemap_node_xmlsitemap_sitemap_settings_alter(&$form) {
  $options = xmlsitemap_priority_options();
  $form['general']['priority']['xmlsitemap_node_promote_priority'] = array(
    '#type' => 'select',
    '#title' => t('Promotion adjustment'),
    '#description' => t('This number will be added to the priority of each post that is promoted to the front page.'),
    '#default_value' => variable_get('xmlsitemap_node_promote_priority', 0.3),
    '#options' => $options,
  );
  $form['general']['priority']['xmlsitemap_node_comment_priority'] = array(
    '#type' => 'select',
    '#title' => t('Comment ratio weight'),
    '#description' => t("This number will be added to the priority of the post with the highest number of comments. This doesn't apply if the maximum number of comments is one."),
    '#default_value' => variable_get('xmlsitemap_node_comment_priority', 0.2),
    '#options' => $options,
  );
  $form['xmlsitemap_node'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content settings'),
    '#description' => t('The settings for the content to include in the site map.'),
    '#collapsible' => TRUE,
  );
  $form['xmlsitemap_node']['xmlsitemap_node_count_comments'] = array(
    '#type' => 'checkbox',
    '#title' => t('Count comments in change date and frequency'),
    '#description' => t('If enabled, the frequency of comments on a post will affect its change frequency and last modification date.'),
    '#default_value' => variable_get('xmlsitemap_node_count_comments', TRUE),
  );
}

/**
 * Implementation of hook_xmlsitemap_update_module_tables_batch_operations().
 */
function xmlsitemap_node_xmlsitemap_update_module_tables_batch_operations() {
  return array(
    '_xmlsitemap_node_module_table_delete_rows',
    '_xmlsitemap_node_module_table_update_rows',
    '_xmlsitemap_node_module_table_add_rows',
  );
}

/*****************************************************************************
 * Menu callbacks / form builders, submit/validate functions.
 ****************************************************************************/

/**
 * Add submit actions to forms.
 */
function xmlsitemap_node_type_submit($form, &$form_state) {
  $values = $form_state['values'];
  $op = isset($values['op']) ? $values['op'] : '';
  $priority = $values['xmlsitemap_node_type_priority'];
  $old_priority = $values['xmlsitemap_old_priority'];
  if ($op == t('Save content type') && $priority != $old_priority || $op == t('Reset to defaults') && $old_priority != 0.1) {
    xmlsitemap_update_sitemap();
  }
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Get array of excluded types.
 * @return
 *  An array of node types to exclude.
 */
function xmlsitemap_node_excludes() {
  static $excludes;
  if (!isset($excludes)) {
    $excludes = array();
    foreach (node_get_types() as $type => $name) {
      if (variable_get("xmlsitemap_node_type_priority_$type", 0.5) < 0) {
        $excludes[] = $type;
      }
    }
    if (empty($excludes)) {
      $excludes = array('');
    }
  }
  return $excludes;
}

/**
 * Calculate the change frequency of a node.
 * @param $node
 *  Data for a node retrieved by _xmlsitemap_node_links().
 * @return
 *  The number of seconds between updates.
 */
function xmlsitemap_node_frequency($node) {
  $age = time() - $node->changed;
  if (variable_get('xmlsitemap_node_count_comments', TRUE)) {
    $age = time() - max($node->changed, $node->last_comment_timestamp);
    $interval = 0;
    if (!empty($node->previously_changed) && isset($node->previous_comment)) {
      $interval = min($node->changed, $node->last_comment_timestamp) - max($node->previously_changed, $node->previous_comment);
    }
    elseif (!empty($node->previously_changed)) {
      $interval = min($node->changed, $node->last_comment_timestamp) - $node->previously_changed;
    }
    elseif (isset($node->previous_comment)) {
      $interval = min($node->changed, $node->last_comment_timestamp) - $node->previous_comment;
    }
  }
  else {
    $interval = empty($node->previously_changed) ? 0 : $node->changed - $node->previously_changed;
  }
  return max($age, $interval);
}

/**
 * Calculate the priority of a node.
 * @param $node
 *  A node object.
 * @return
 *  A number between 0 and 1, or -1.
 */
function xmlsitemap_node_priority($node) {
  static $maxcomments;
  if (!isset($maxcomments)) {
    $maxcomments = 0;
    if (module_exists('comment')) {
      $maxcomments = db_result(db_query("SELECT MAX(comment_count) FROM {node_comment_statistics}"));
    }
  }
  if ($node->priority_override != -2.0) {
    $priority = $node->priority_override;
  }
  else {
    $priority = variable_get('xmlsitemap_node_type_priority_'. $node->type, 0.5);
  }
  if ($node->promote) {
    $priority += variable_get('xmlsitemap_node_promote_priority', 0.3);
  }
  if ($maxcomments > 1) {
    $priority += $node->comment_count / $maxcomments * variable_get('xmlsitemap_node_comment_priority', 0.2);
  }
  $priority = min(round($priority, 1), 1);
  return $priority;
}

/*****************************************************************************
 * Private functions - database batch operations.
 ****************************************************************************/

/**
 * Batch function used to update the module database tables.
 * @param $context
 *  The context parameter passed from batch_process().
 */
function _xmlsitemap_node_module_table_add_rows(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = (integer) db_result(db_query('SELECT COUNT(n.nid)
      FROM {node} n
      LEFT JOIN {xmlsitemap_node} xn ON xn.nid = n.nid
      WHERE xn.nid IS NULL')
    );
    $context['sandbox']['progress'] = 0;
  }
  if ($context['sandbox']['max']) {
    $result = db_query_range('SELECT n.nid, n.created AS previously_changed, n.changed
      FROM {node} n
      LEFT JOIN {xmlsitemap_node} xn ON xn.nid = n.nid
      WHERE xn.nid IS NULL
        AND n.nid > %d
      ORDER BY n.nid ASC',
      $context['sandbox']['current_node'], 0, 1
    );
    if ($row = db_fetch_object($result)) {
      drupal_write_record('xmlsitemap_node', $row);
      $context['sandbox']['progress']++;
      $context['sandbox']['current_node'] = $row->nid;
      $context['results']['added'] = $context['sandbox']['progress'];
    }
    if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
  }
}

/**
 * Batch function used to update the module database tables.
 * @param $context
 *  The context parameter passed from batch_process().
 */
function _xmlsitemap_node_module_table_delete_rows(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = (integer) db_result(db_query('SELECT COUNT(xn.nid)
      FROM {xmlsitemap_node} xn
      LEFT JOIN {node} n ON n.nid = xn.nid
      WHERE n.nid IS NULL')
    );
    $context['sandbox']['progress'] = 0;
  }
  if ($context['sandbox']['max']) {
    $nid = db_result(
      db_query("SELECT xn.nid
        FROM {xmlsitemap_node} xn
        LEFT JOIN {node} n ON n.nid = xn.nid
        WHERE n.nid IS NULL
          AND xn.nid > %d",
        $context['sandbox']['current_node']
      )
    );
    if ($nid === FALSE) {
      $context['finished'] = 1;
    }
    else {
      db_query('DELETE FROM {xmlsitemap_node} WHERE nid = %d', $nid);
      $context['sandbox']['progress']++;
      $context['sandbox']['current_node'] = $nid;
      $context['results']['deleted'] = $context['sandbox']['progress'];
      if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
        $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
      }
    }
  }
}

/**
 * Batch function used to update the module database tables.
 * @param $context
 *  The context parameter passed from batch_process().
 */
function _xmlsitemap_node_module_table_update_rows(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = (integer) db_result(db_query('SELECT COUNT(n.nid)
      FROM {node} n
      INNER JOIN {xmlsitemap_node} xn ON xn.nid = n.nid
      WHERE n.changed > xn.changed')
    );
    $context['sandbox']['progress'] = 0;
  }
  if ($context['sandbox']['max']) {
    $result = db_query_range('SELECT n.nid, xn.changed AS previously_changed, n.changed
      FROM {node} n
      INNER JOIN {xmlsitemap_node} xn ON xn.nid = n.nid
      WHERE n.nid > %d
        AND n.changed > xn.changed
      ORDER BY n.nid ASC',
      $context['sandbox']['current_node'], 0, 1
    );
    if ($row = db_fetch_object($result)) {
      drupal_write_record('xmlsitemap_node', $row, 'nid');
      $context['sandbox']['progress']++;
      $context['sandbox']['current_node'] = $row->nid;
      $context['results']['updated'] = $context['sandbox']['progress'];
    }
    if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
  }
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
