<?php
// $Id: xmlsitemap_node.module,v 1.19.2.45 2009/02/15 00:20:47 kiam Exp $

/**
 * @file
 * Adds nodes to the site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_comment().
 */
function xmlsitemap_node_comment($a1, $op) {
  $maxcomments = (integer) db_result(db_query('SELECT MAX(comment_count) FROM {node_comment_statistics}'));
  switch ($op) {
    case 'insert':
    case 'update':
    case 'delete':
    case 'publish':
    case 'unpublish':
      $nid = is_array($a1) ? $a1['nid'] : $a1->nid;
      if ($nid && $maxcomments > 1) {
        $comments = (integer) db_result(db_query('SELECT comment_count
          FROM {node_comment_statistics}
          WHERE nid = %d',
          $nid)
        );
        $query = "SELECT * FROM {xmlsitemap_node} WHERE nid = %d";
        $link = db_fetch_object(db_query($query, $nid));
        $node = node_load($nid);
        if ($link) {
          $update = TRUE;
        }
        else {
          if (!$node) {
            return;
          }
          $row = new stdClass();
          $row->nid = $node->nid;
          $row->changed = $node->changed;
          $row->previously_changed = $node->created;
        }
        $row->comment_ratio = $comments / $maxcomments;
        drupal_write_record('xmlsitemap_node', $row, isset($update) ? 'nid' : NULL);
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_node_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'node_type_form':
      if (isset($form['identity']['type'])) {
        if (!isset($form['xmlsitemap'])) {
          $form['xmlsitemap'] = array(
            '#type' => 'fieldset',
            '#title' => t('XML site map'),
            '#collapsible' => TRUE,
            '#weight' => 30,
          );
        }
        $form['xmlsitemap']['xmlsitemap_node_type_priority'] = array(
          '#type' => 'select',
          '#title' => t('Priority adjustment'),
          '#description' => t('This number will be added to the priority of this content type.'),
          '#default_value' => variable_get('xmlsitemap_node_type_priority_'. $form['#node_type']->type, 0.5),
          '#options' => xmlsitemap_priority_options('exclude'),
        );
        $form['xmlsitemap']['xmlsitemap_old_priority'] = array(
          '#type' => 'value',
          '#value' => variable_get('xmlsitemap_node_type_priority_'. $form['#node_type']->type, 0.5)
        );
        $form['#submit'][] = 'xmlsitemap_node_type_submit';
      }
      break;
    default:
      if (isset($form['type']) && $form_id == $form['type']['#value'] .'_node_form') {
        $node = $form['#node'];
        if (!isset($form['xmlsitemap'])) {
          $form['xmlsitemap'] = array(
            '#type' => 'fieldset',
            '#title' => t('XML site map'),
            '#collapsible' => TRUE,
            '#access' => user_access('override node priority') || user_access('administer nodes'),
            '#weight' => 30,
          );
        }
        $options = xmlsitemap_priority_options('both');
        $default = variable_get('xmlsitemap_node_type_priority_'. $node->type, '0.5');
        $form['xmlsitemap']['priority_override'] = array(
          '#type' => 'select',
          '#title' => t('Priority'),
          '#description' => t('The default priority is %priority.', array('%priority' => $options[$default])),
          '#default_value' => isset($node->priority_override) ? $node->priority_override : -2.0,
          '#options' => $options,
          '#access' => user_access('override node priority') || user_access('administer nodes'),
        );
        $form['xmlsitemap_node_status'] = array(
          '#type' => 'value',
          '#value' => $node->status,
        );
      }
      break;
  }
}

/**
 * Implementation of hook_node_operations().
 */
function xmlsitemap_node_node_operations() {
  $operations = array(
    'xmlsitemap_add_nodes' => array(
      'label' => t('Add the selected posts to the XML site map'),
      'callback' => '_xmlsitemap_node_priority_operations',
      'callback arguments' => array('priority' => 0.5),
    ),
    'xmlsitemap_change_nodes_priority' => array(
      'label' => t('Change the XML site map priority of the selected posts to default'),
      'callback' => '_xmlsitemap_node_priority_operations',
      'callback arguments' => array('piority' => -2.0),
    ),
    'xmlsitemap_remove_nodes' => array(
      'label' => t('Remove the selected posts from the XML site map'),
      'callback' => '_xmlsitemap_node_priority_operations',
      'callback arguments' => array('priority' => -1.0),
    ),
  );
  return $operations;
}

/**
 * Implementation of hook_node_type().
 */
function xmlsitemap_node_node_type($op, $info) {
  if ($op == 'delete') {
    variable_del('xmlsitemap_node_type_priority_'. $info->type);
  }
  elseif ($op == 'update' && !empty($info->old_type) && $info->type != $info->old_type) {
    variable_set('xmlsitemap_node_type_priority_'. $info->type, variable_get('xmlsitemap_node_type_priority_'. $info->old_type, 0.5));
    variable_del('xmlsitemap_node_type_priority_'. $info->old_type);
  }
  xmlsitemap_update_sitemap();
}

/**
 * Implementation of hook_nodeapi().
 */
function xmlsitemap_node_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'prepare':
      $priority_override = db_result(db_query("SELECT priority_override
        FROM {xmlsitemap_node} WHERE nid = %d",
        $node->nid)
      );
      $node->priority_override = $priority_override !== FALSE ? $priority_override : -2.0;
      break;
    case 'insert':
      $row = new stdClass();
      $row->nid = $node->nid;
      $row->changed = $row->previously_changed = $node->changed;
      $row->priority_override = isset($node->priority_override) ? $node->priority_override : -2.0;
      drupal_write_record('xmlsitemap_node', $row);
      if ($node->status) {
        xmlsitemap_update_sitemap();
      }
      break;
    case 'update':
      if (($result = db_fetch_object(db_query("SELECT * FROM {xmlsitemap_node} WHERE nid = %d", $node->nid))) === FALSE) {
        $row = new stdClass();
        $row->nid = $node->nid;
        $row->changed = $row->previously_changed = $node->changed;
        $row->priority_override = isset($node->priority_override) ? $node->priority_override : -2.0;
      }
      else {
        $row = $result;
        $row->previously_changed = $row->changed;
        $row->changed = $node->changed;
        if (isset($node->priority_override)) {
          $row->priority_override =  $node->priority_override;
        }
      }
      drupal_write_record('xmlsitemap_node', $row, $result === FALSE ? NULL : 'nid');
      if ($node->status || $node->xmlsitemap_node_status) {
        xmlsitemap_update_sitemap();
      }
      break;
    case 'delete':
      db_query("DELETE FROM {xmlsitemap_node} WHERE nid = %d", $node->nid);
      if ($node->status) {
        xmlsitemap_update_sitemap();
      }
      break;
  }
}

/**
 * Implementation of hook_perm().
 */
function xmlsitemap_node_perm() {
  return array('override node priority');
}

/**
 * Implementation of hook_xmlsitemap_description().
 */
function xmlsitemap_node_xmlsitemap_description() {
  return '<dt>'. t('XML Sitemap: Node') .'</dt>'.
    '<dd>'. t('<em>XML Sitemap: Node</em> adds nodes (content) to the site map. The default priority of a node is determined by a combination of its <a href="@content">content type</a> priority, whether it appears on the front page of your site, and the number of comments it has received. You can override the default priority for individual nodes when you add or edit a node.', array('@content' => url('admin/content/types'))) .'</dd>';
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_node_xmlsitemap_links() {
  $excludes = xmlsitemap_node_excludes();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $coalesce = 'COALESCE';
      $concat = "CONCAT('node/', n.nid)";
      break;
    case 'pgsql':
      $coalesce = 'FIRST';
      $concat = "('node/' || n.nid)";
      break;
  }
  $columns = 'n.nid, n.type, n.promote, xn.changed, xn.previously_changed, xn.priority_override, xn.comment_ratio';
  $query = "SELECT $columns, $coalesce(ua.dst) AS alias FROM {node} n
    LEFT JOIN {xmlsitemap_node} xn ON n.nid = xn.nid
    LEFT JOIN {url_alias} ua ON ua.src = $concat
    WHERE n.status > 0
      AND n.type NOT IN (". db_placeholders($excludes, 'varchar') .")
      AND (xn.priority_override = -2.0 OR xn.priority_override >= 0.0)
      AND n.nid <> %d
    GROUP BY $columns";
  $nid = 0;
  $frontpage = explode('/', drupal_get_normal_path(variable_get('site_frontpage', 'node')));
  if (count($frontpage) == 2 && $frontpage[0] == 'node' && is_numeric($frontpage[1])) {
    $nid = $frontpage[1];
  }
  $query_args = array_merge($excludes, array($nid));
  $result = db_query(db_rewrite_sql($query), $query_args);
  $row = new stdClass();
  $row->module = 'xmlsitemap_node';
  $row->type = 'node';
  while ($node = db_fetch_object($result)) {
    $row->loc = 'node/'. $node->nid;
    $row->id = $node->nid;
    $row->lastmod = $node->changed;
    $row->changefreq = max(time() - $node->changed, empty($node->previously_changed) ? 0 : $node->changed - $node->previously_changed);
    if ($node->priority_override != -2.0) {
      $priority = $node->priority_override;
    }
    else {
      $priority = variable_get('xmlsitemap_node_type_priority_'. $node->type, 0.5);
    }
    if ($node->promote) {
      $priority += variable_get('xmlsitemap_node_promote_priority', 0.3);
    }
    $priority += $node->comment_ratio * variable_get('xmlsitemap_node_comment_priority', 0.2);
    $row->priority = min(round($priority, 1), 1);
    if (db_result(db_query("SELECT loc FROM {xmlsitemap} WHERE loc = '%s'", $row->loc)) != $row->loc) {
      drupal_write_record('xmlsitemap', $row);
    }
  }
}

/**
 * Implementation of hook_xmlsitemap_sitemap_settings_alter().
 */
function xmlsitemap_node_xmlsitemap_sitemap_settings_alter(&$form) {
  $options = xmlsitemap_priority_options();
  $form['general']['priority']['xmlsitemap_node_promote_priority'] = array(
    '#type' => 'select',
    '#title' => t('Promotion adjustment'),
    '#description' => t('This number will be added to the priority of each post that is promoted to the front page.'),
    '#default_value' => variable_get('xmlsitemap_node_promote_priority', 0.3),
    '#options' => $options,
  );
  $form['general']['priority']['xmlsitemap_node_comment_priority'] = array(
    '#type' => 'select',
    '#title' => t('Comment ratio weight'),
    '#description' => t("This number will be added to the priority of the post with the highest number of comments. This doesn't apply if the maximum number of comments is one."),
    '#default_value' => variable_get('xmlsitemap_node_comment_priority', 0.2),
    '#options' => $options,
  );
}

/*****************************************************************************
 * Menu callbacks / form builders, submit/validate functions.
 ****************************************************************************/

/**
 * Add submit actions to forms.
 */
function xmlsitemap_node_type_submit($form, &$form_state) {
  $values = $form_state['values'];
  $op = isset($values['op']) ? $values['op'] : '';
  $priority = $values['xmlsitemap_node_type_priority'];
  $old_priority = $values['xmlsitemap_old_priority'];
  if ($op == t('Save content type') && $priority != $old_priority || $op == t('Reset to defaults') && $old_priority != 0.1) {
    xmlsitemap_update_sitemap();
  }
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Get array of excluded types.
 * @return
 *  An array of node types to exclude.
 */
function xmlsitemap_node_excludes() {
  static $excludes;
  if (!isset($excludes)) {
    $excludes = array();
    foreach (node_get_types() as $type => $name) {
      if (variable_get("xmlsitemap_node_type_priority_$type", 0.5) < 0) {
        $excludes[] = $type;
      }
    }
    if (empty($excludes)) {
      $excludes = array('');
    }
  }
  return $excludes;
}

/*****************************************************************************
 * Private functions - node operation callbacks.
 ****************************************************************************/

/**
 * Node operations callback.
 */
function _xmlsitemap_node_priority_operations($nodes, $priority) {
  if (count($nodes) > 10) {
    $batch = array(
      'operations' => array(
        array('_xmlsitemap_node_batch_process', array($nodes, $priority))
      ),
      'finished' => 'xmlsitemap_batch_operations_finished',
      'title' => t('Processing'),
      'progress_message' => '',
      'error_message' => t('The update has encountered an error.'),
    );
    batch_set($batch);
  }
  else {
    foreach ($nodes as $nid) {
      _xmlsitemap_node_set_priority($nid, $priority);
    }
    drupal_set_message(t(('The update has been performed.')));
  }
}

/*****************************************************************************
 * Private functions - batch operation callbacks.
 ****************************************************************************/

/**
 * Node operations batch process callback.
 */
function _xmlsitemap_node_batch_process($nodes, $priority, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($nodes);
    $context['sandbox']['nodes'] = $nodes;
  }
  $nid = array_shift($context['sandbox']['nodes']);
  if ($node = _xmlsitemap_node_set_priority($nid, $priority)) {
    $context['results'][] = l($node->title, 'node/'. $node->nid);
  }
  $context['sandbox']['progress']++;
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/*****************************************************************************
 * Private functions - node, and batch operations support functions.
 ****************************************************************************/

/**
 * Add node data to the the xmlsitemap_node table, and set the
 * priority_override field to the passed value.
 * @param $nid
 *   The node ID.
 * @param $priority
 *   The priority to set.
 * @return
 *   The node object.
 */
function _xmlsitemap_node_set_priority($nid, $priority) {
  if ($node = node_load($nid)) {
    $result = db_fetch_object(db_query("SELECT * FROM {xmlsitemap_node} WHERE nid = %d", $nid));
    if ($result === FALSE) {
      $row = new stdClass();
      $row->nid = $node->nid;
      $row->changed = $node->changed;
      $row->previously_changed = $node->created;
    }
    else {
      $row = $result;
      if ($node->changed > $row->changed) {
        $row->previously_changed = $row->changed;
        $row->changed = $node->changed;
      }
    }
    $row->priority_override = $priority;
    drupal_write_record('xmlsitemap_node', $row, $result === FALSE ? NULL : 'nid');
  }
  return $node;
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
