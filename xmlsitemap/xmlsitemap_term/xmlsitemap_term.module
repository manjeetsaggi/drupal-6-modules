<?php
// $Id: xmlsitemap_term.module,v 1.11.2.25 2009/02/15 00:20:47 kiam Exp $

/**
 * @file
 * Adds terms to the site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_term_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'taxonomy_form_term':
      $priority = db_result(db_query("SELECT priority_override
        FROM {xmlsitemap_term}
        WHERE tid = %d", $form['tid']['#value'])
      );
      if ($priority === FALSE) {
        $priority = -2.0;
      }
      $options = xmlsitemap_priority_options('both');
      $default = variable_get('xmlsitemap_term_vocabulary_priority_'. $form['vid']['#value'], '0.5');
      if (!isset($form['xmlsitemap'])) {
        $form['xmlsitemap'] = array(
          '#type' => 'fieldset',
          '#title' => t('XML site map'),
          '#collapsible' => TRUE,
        );
      }
      $form['xmlsitemap']['xmlsitemap_term_priority'] = array(
        '#type' => 'select',
        '#title' => t('Priority'),
        '#description' => t('The default priority is %priority.', array('%priority' => $options[$default])),
        '#default_value' => $priority,
        '#options' => $options,
      );
      $form['submit']['#weight'] = isset($form['submit']['#weight']) ? $form['submit']['#weight'] + 1 : 1;
      $form['delete']['#weight'] = isset($form['delete']['#weight']) ? $form['delete']['#weight'] + 1 : 1;
      break;
    case 'taxonomy_form_vocabulary':
      $form['xmlsitemap'] = array(
        '#type' => 'fieldset',
        '#title' => t('XML site map'),
        '#collapsible' => TRUE,
      );
      $form['xmlsitemap']['xmlsitemap_term_vocabulary_priority'] = array(
        '#type' => 'select',
        '#title' => t('Priority'),
        '#description' => t('This will be the default priority of terms in this vocabulary.'),
        '#default_value' => variable_get('xmlsitemap_term_vocabulary_priority_'. $form['vid']['#value'], 0.5),
        '#options' => xmlsitemap_priority_options('exclude'),
      );
      $form['submit']['#weight'] = isset($form['submit']['#weight']) ? $form['submit']['#weight'] + 1 : 1;
      $form['delete']['#weight'] = isset($form['delete']['#weight']) ? $form['delete']['#weight'] + 1 : 1;
      break;
    default:
      if (isset($form['type']['#value']) && $form_id == $form['type']['#value'] .'_node_form') {
        $node = $form['#node'];
        if (isset($form['type']) && isset($node->nid)) {
          if (isset($node->taxonomy)) {
            $terms = $node->taxonomy;
          }
          else {
            $terms = taxonomy_node_get_terms($node->nid);
          }
          $form['xmlsitemap_term_taxonomy'] = array(
            '#type' => 'value',
            '#value' => $terms,
          );
        }
      }
      break;
  }
}

/**
 * Implementation of hook_node_operations().
 */
function xmlsitemap_term_node_operations() {
  $operations = array(
    'xmlsitemap_add_terms' => array(
      'label' => t('Add the vocabulary terms of the selected posts to the XML site map'),
      'callback' => '_xmlsitemap_term_priority_operations',
      'callback arguments' => array('priority' => 0.5),
    ),
    'xmlsitemap_change_terms_priority' => array(
      'label' => t('Change the XML site map priority of the selected posts vocabulary terms to default'),
      'callback' => '_xmlsitemap_term_priority_operations',
      'callback arguments' => array('piority' => -2.0),
    ),
    'xmlsitemap_remove_terms' => array(
      'label' => t('Remove the vocabulary terms of the selected posts from the XML site map'),
      'callback' => '_xmlsitemap_term_priority_operations',
      'callback arguments' => array('priority' => -1.0),
    ),
  );
  return $operations;
}

/**
 * Implementation of hook_nodeapi().
 */
function xmlsitemap_term_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
      if (!empty($node->taxonomy)) {
        $taxonomy_keys = array_keys($node->taxonomy);
        db_query(
          "UPDATE {xmlsitemap_term} SET previously_changed = changed, changed = %d WHERE tid IN(". db_placeholders($taxonomy_keys, 'int') .")",
          array_merge(array($node->created), $taxonomy_keys)
        );
        xmlsitemap_update_sitemap();
      }
      break;
    case 'update':
      $taxonomy = empty($node->taxonomy) ? array() : array_keys($node->taxonomy);
      $xmlsitemap_term_taxonomy = empty($node->xmlsitemap_term_taxonomy) ? array() : array_keys($node->xmlsitemap_term_taxonomy);
      $terms = array_merge(array_diff($taxonomy, $xmlsitemap_term_taxonomy), array_diff($xmlsitemap_term_taxonomy, $taxonomy));
      if (!empty($terms)) {
        db_query(
          "UPDATE {xmlsitemap_term} SET previously_changed = changed, changed = %d WHERE tid IN(". db_placeholders($terms, 'varchar') .")",
          array_merge(array($node->changed), $terms)
        );
        xmlsitemap_update_sitemap();
      }
      break;
    case 'delete':
      if (!empty($node->taxonomy)) {
        $taxonomy_keys = array_keys($node->taxonomy);
        db_query(
          "UPDATE {xmlsitemap_term} SET previously_changed = changed, changed = %d WHERE tid IN(". db_placeholders($taxonomy_keys, 'int') .")",
          array_merge(array(time(), $taxonomy_keys))
        );
        xmlsitemap_update_sitemap();
      }
      break;
  }
}

/**
 * Implementation of hook_taxonomy().
 */

function xmlsitemap_term_taxonomy($op, $type, $array = NULL) {
  if ($type == 'vocabulary') {
    switch ($op) {
      case 'delete':
        variable_del('xmlsitemap_term_vocabulary_priority_'. $array['vid']);
        xmlsitemap_update_sitemap();
        break;
      case 'insert':
      case 'update':
        if (variable_get('xmlsitemap_term_vocabulary_priority_'. $array['vid'], 0.5) != $array['xmlsitemap_term_vocabulary_priority']) {
          variable_set('xmlsitemap_term_vocabulary_priority_'. $array['vid'], $array['xmlsitemap_term_vocabulary_priority']);
          xmlsitemap_update_sitemap();
        }
        break;
    }
  }
  else {
    switch ($op) {
      case 'delete':
        db_query("DELETE FROM {xmlsitemap_term} WHERE tid = %d", $array['tid']);
        break;
      case 'insert':
        db_query("INSERT INTO {xmlsitemap_term} (tid, changed, priority_override) VALUES (%d, %d, %s)",
          $array['tid'], time(), $array['xmlsitemap_term_priority']
        );
        break;
      case 'update':
        if (isset($array['xmlsitemap_term_priority'])) {
          db_query("UPDATE {xmlsitemap_term} SET priority_override = %s WHERE tid = %d",
            $array['xmlsitemap_term_priority'], $array['tid']
          );
        }
        else {
          $priority = db_result(db_query("SELECT priority_override
            FROM {xmlsitemap_term}
            WHERE tid = %d", $array['tid'])
          );
          $array['xmlsitemap_term_priority'] = $priority !== FALSE ? $priority : -2.0;
        }
        break;
    }
    xmlsitemap_update_sitemap();
  }
}

/**
 * Implementation of hook_xmlsitemap_description().
 */
function xmlsitemap_term_xmlsitemap_description() {
  return '<dt>'. t('XML Sitemap: Term') .'</dt>'.
    '<dd>'. t('The module adds <a href="@terms">taxonomy terms</a> (categories) to the site map. You can change the default priority when you add or edit a vocabulary, and you can override the default priority when you add or edit individual terms.', array('@terms' => url('admin/content/taxonomy'))) .'</dd>';
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_term_xmlsitemap_links() {
  $excludes = array();
  $result = db_query("SELECT vid FROM {vocabulary}");
  while ($vocabulary = db_fetch_object($result)) {
    if (variable_get('xmlsitemap_term_vocabulary_priority_'. $vocabulary->vid, 0.5) == -1) {
        $excludes[] = $vocabulary->vid;
    }
  }
  if (empty($excludes)) {
    $excludes = array(0);
  }
  $tid = 0;
  $frontpage = explode('/', drupal_get_normal_path(variable_get('site_frontpage', 'node')));
  if (count($frontpage) == 3 && $frontpage[0] == 'taxonomy' && $frontpage[1] == 'term' && is_numeric($frontpage[2])) {
    $tid = $frontpage[2];
  }
  elseif (count($frontpage) == 2 && $frontpage[0] == 'forum' && is_numeric($frontpage[1])) {
    $tid = $frontpage[1];
  }
  $query_args = array_merge($excludes, array($tid));
  $result = db_query(db_rewrite_sql("SELECT t.tid, t.vid, v.module, xt.changed, xt.previously_changed, xt.priority_override
    FROM {term_data} t
    LEFT JOIN {vocabulary} v ON t.vid = v.vid
    LEFT JOIN {xmlsitemap_term} xt ON t.tid = xt.tid
    WHERE t.vid NOT IN (". db_placeholders($excludes, 'int') .")
      AND xt.priority_override <> -1
      AND t.tid <> %d
    GROUP BY t.tid, t.vid, v.module, xt.changed, xt.previously_changed, xt.priority_override", 't', 'tid'),
    $query_args
  );
  $row = new stdClass();
  $row->module = 'xmlsitemap_term';
  $row->type = 'taxonomy';
  while ($term = db_fetch_object($result)) {
    if ($term->module == 'forum') {
      $row->loc = 'forum/'. $term->tid;
    }
    else {
      $row->loc = taxonomy_term_path($term);
    }
    $row->id = $term->tid;
    $row->lastmod = $term->changed;
    $row->changefreq = max(time() - $term->changed, empty($term->previously_changed) ? 0 : $term->changed - $term->previously_changed);
    if ($term->priority_override != -2.0) {
      $row->priority = $term->priority_override;
    }
    else {
      $row->priority = variable_get('xmlsitemap_term_vocabulary_priority_'. $term->vid, 0.5);
    }
    if (db_result(db_query("SELECT loc FROM {xmlsitemap} WHERE loc = '%s'", $row->loc)) != $row->loc) {
      drupal_write_record('xmlsitemap', $row);
    }
  }
}

/*****************************************************************************
 * Private functions - node operation callbacks.
 ****************************************************************************/

/**
 * Node operations callback.
 */
function _xmlsitemap_term_priority_operations($nodes, $priority) {
  if (count($nodes) > 0) {
    $batch = array(
      'operations' => array(
        array('_xmlsitemap_term_batch_process', array($nodes, $priority))
      ),
      'finished' => 'xmlsitemap_batch_operations_finished',
      'title' => t('Processing'),
      'progress_message' => '',
      'error_message' => t('The update has encountered an error.'),
    );
    batch_set($batch);
  }
}

/*****************************************************************************
 * Private functions - batch operation callbacks.
 ****************************************************************************/

/**
 * Node operations batch process callback.
 */
function _xmlsitemap_term_batch_process($nodes, $priority, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($nodes);
    $context['sandbox']['nodes'] = $nodes;
    $context['sandbox']['terms'] = array();
  }
  if (empty($context['sandbox']['terms'])) {
    $nid = array_shift($context['sandbox']['nodes']);
    if ($node = node_load($nid)) {
      $context['sandbox']['terms'] = taxonomy_node_get_terms($node);
      $context['sandbox']['node'] = $node;
    }
  }
  $term = array_shift($context['sandbox']['terms']);
  if (isset($term)) {
    $node = $context['sandbox']['node'];
    $result = db_fetch_object(db_query("SELECT * FROM {xmlsitemap_term} WHERE tid = %d", $term->tid));
    if ($result === FALSE) {
      $row = new stdClass();
      $row->tid = $term->tid;
      $row->changed = $node->changed;
      $row->previously_changed = $node->created;
    }
    else {
      $row = $result;
      if ($node->changed > $row->changed) {
        $row->previously_changed = $row->changed;
        $row->changed = $node->changed;
      }
    }
    $row->priority_override = $priority;
    drupal_write_record('xmlsitemap_term', $row, $result === FALSE ? NULL : 'tid');
  }
  if (empty($context['sandbox']['terms'])) {
    $context['sandbox']['progress']++;
    if (!empty($context['sandbox']['node'])) {
      $node = $context['sandbox']['node'];
      $context['results'][] = l($node->title, 'node/'. $node->nid);
    }
  }
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
