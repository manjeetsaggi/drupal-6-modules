<?php
// $Id: xmlsitemap.module,v 1.1.2.5 2009/02/15 00:20:47 kiam Exp $

/**
 * @file
 * Creates a site map compatible with the sitemaps.org schema.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_cron().
 */
function xmlsitemap_cron() {
  if (!variable_get('site_offline', 0) && variable_get('xmlsitemap_cron_submit_frequency', -1) >= 0 && variable_get('xmlsitemap_changed', FALSE)) {
    $count = variable_get('xmlsitemap_cron_submit_delay', -1);
    if (--$count <= 0) {
      _xmlsitemap_ping();
      $count = variable_get('xmlsitemap_cron_submit_frequency', -1);
    }
    variable_set('xmlsitemap_cron_submit_delay', $count);
  }
}

/**
 * Implementation of hook_exit().
 */
function xmlsitemap_exit() {
  drupal_bootstrap(DRUPAL_BOOTSTRAP_PATH);
  if (variable_get('site_offline', 0) || arg(0) == 'batch') {
    return;
  }
  if (variable_get('xmlsitemap_log_access', FALSE)) {
    $items = array();
    $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
    $link_count = _xmlsitemap_link_count();
    if ($link_count / $chunk_size > 1) {
      for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
        $items["sitemap$chunk.xml"] = $chunk;
      }
    }
    if (isset($items[arg(0)]) && is_null(arg(1))) {
      $chunk = $items[arg(0)];
      if ($chunk < $link_count / $chunk_size) {
        $write_log = TRUE;
      }
    }
    elseif (arg(0) == 'sitemap.xml' && is_null(arg(1))) {
      $write_log = TRUE;
    }
    if (isset($write_log)) {
      drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
      $result = module_invoke_all('xmlsitemap_engines', 'access');
      if (!empty($result)) {
        $message = $result[0];
      }
      else {
        $message = 'Sitemap downloaded by @user-agent at @address.';
      }
      watchdog('xmlsitemap', $message,
        array(
          '@user-agent' => $_SERVER['HTTP_USER_AGENT'],
          '@address' => $_SERVER['REMOTE_ADDR'],
        )
      );
    }
  }
  if (!isset($write_log) && variable_get('xmlsitemap_submit', FALSE) && variable_get('xmlsitemap_changed', FALSE)) {
    drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
    _xmlsitemap_ping();
  }
}

/**
 * Implementation of hook_help().
 */
function xmlsitemap_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/xmlsitemap':
      $output = t('Configure the site map.');
      break;
    case 'admin/settings/xmlsitemap/engines':
      $output = t('Configure the behavior for search engines.');
      break;
    case 'admin/settings/xmlsitemap/tools/update':
      $output = t('Update the XML Sitemap database tables. Use this page only if <em>XML Sitemap</em> instructs you to do so.');
      break;
    case 'admin/help#xmlsitemap':
      $output = '<p>'. t('XML Sitemap automatically creates a site map that conforms to the <a href="@sitemaps.org">sitemaps.org specification</a>. This helps search engines keep their search results up to date.', array('@sitemaps.org' => 'http://www.sitemaps.org')) .'</p>';
      $output .= '<h3>'. t('Supporting modules') .'</h3>';
      $output .= '<p>'. t('By itself, the XML Sitemap module adds only the front page of your site to the site map. Other types of links are handled by supporting modules.') .'</p>';
      $optional = '';
      foreach (module_implements('xmlsitemap_description', TRUE) as $module) {
        $function = $module .'_xmlsitemap_description';
        $optional .= $function();
      }
      if (!empty($optional)) {
        $output .= "<dl>$optional</dl>";
      }
      $output .= '<p>'. t('Links may be assigned a priority between 0.0 and 1.0. The default priority is 0.5. A priority of <em>Not in site map</em> excludes a link from the site map.') .'</p>';
      $output .= '<p>'. t('More information is available in the <a href="@module_docs">XML Sitemap documentation</a>.', array('@module_docs' => 'http://drupal.org/handbook/modules/gsitemap')) .'</p>';
      break;
    default:
      $output = '';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_menu().
 */
function xmlsitemap_menu() {
  $items = array();
  $access_config = array('administer site configuration');
  $access_content = array('access content');
  $items['admin/settings/xmlsitemap'] = array(
    'title' => 'XML Sitemap',
    'description' => 'Configure the XML site map.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_settings_sitemap'),
    'access arguments' => $access_config,
  );
  $items['admin/settings/xmlsitemap/sitemap'] = array(
    'title' => 'Site map',
    'description' => 'Configure the XML site map.',
    'weight' => -1,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/xmlsitemap/engines'] = array(
    'title' => 'Search engines',
    'description' => 'Configure the submission settings of the XML site map to the search engines.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_settings_engines'),
    'access arguments' => $access_config,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/xmlsitemap/tools/update'] = array(
    'title' => 'Update database',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_tools_update'),
    'access arguments' => $access_config,
    'type' => MENU_CALLBACK,
  );
  $items['sitemap.xml'] = array(
    'title' => 'Site map index',
    'page callback' => 'xmlsitemap_output',
    'access arguments' => $access_content,
    'type' => MENU_CALLBACK,
  );
  $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
  $link_count = _xmlsitemap_link_count();
  if ($link_count / $chunk_size > 1) {
    for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
      $items["sitemap$chunk.xml"] = array(
        'title' => 'Site map !number',
        'title arguments' => array('!number' => $chunk),
        'page callback' => 'xmlsitemap_output',
        'page arguments' => array((string) $chunk),
        'access arguments' => $access_content,
        'type' => MENU_CALLBACK,
      );
    }
  }
  return $items;
}

/*****************************************************************************
 * Menu callbacks / form builders, submit/validate functions.
 ****************************************************************************/

/**
 * Menu callback; display the site map.
 * @param $chunk
 *  An integer specifying which chunk of the site map is being requested.
 *  If not set and there is more than one chunk, display the site map index.
 */
function xmlsitemap_output($chunk = NULL) {
  if (variable_get('xmlsitemap_update', FALSE)) {
    _xmlsitemap_update();
  }
  drupal_set_header('Content-type: text/xml; charset=utf-8');
  $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
  $link_count = _xmlsitemap_link_count();
  if (isset($chunk)) {
    if ($chunk < $link_count / $chunk_size) {
      _xmlsitemap_output_chunk($chunk);
    }
    else {
      drupal_not_found();
    }
  }
  else {
    if ($link_count > $chunk_size) {
      _xmlsitemap_output_index();
    }
    else {
      _xmlsitemap_output_chunk();
    }
  }
  drupal_page_footer();
  exit;
}

/**
 * Form builder; return the search engine settings form.
 */
function xmlsitemap_settings_engines() {
  $form['submission'] = array(
    '#type' => 'fieldset',
    '#title' => t('Submission settings'),
    '#collapsible' => TRUE,
  );
  $form['submission']['xmlsitemap_submit'] = array(
    '#type' => 'checkbox',
    '#title' => t('Submit the site map when updated'),
    '#description' => t('If enabled, the search engines will be notified of changes to the site map each time it is updated.'),
    '#default_value' => variable_get('xmlsitemap_submit', FALSE),
  );
  $form['submission']['xmlsitemap_log_access'] = array(
    '#type' => 'checkbox',
    '#title' => t('Log access'),
    '#description' => t('If enabled, a watchdog entry will be made each time the site map is accessed, containing information about the requestor.'),
    '#default_value' => variable_get('xmlsitemap_log_access', FALSE),
  );
  $form['submission']['xmlsitemap_cron_submit_frequency'] = array(
    '#type' => 'select',
    '#title' => t('Frequency of cron site map submission'),
    '#description' => t('The rate at which the site map is submitted to the search engines over the times the cron maintenance tasks are executed.'),
    '#default_value' => variable_get('xmlsitemap_cron_submit_frequency', -1),
    '#options' => array(
      '10' => t('Once every ten times'),
      '9' => t('Once every nine times'),
      '8' => t('Once every eight times'),
      '7' => t('Once every seven times'),
      '6' => t('Once every six times'),
      '5' => t('Once every five times'),
      '4' => t('Once every four times'),
      '3' => t('Once every three times'),
      '2' => t('Once every two times'),
      '1' => t('Always'),
      '-1' => t('Never'),
    ),
  );
  drupal_alter('xmlsitemap_engine_settings', $form);
  $form = system_settings_form($form);
  array_unshift($form['#submit'], 'xmlsitemap_settings_engines_submit');
  return $form;
}

/**
 * Submit the search engine settings form.
 */
function xmlsitemap_settings_engines_submit($form, &$form_state) {
  menu_rebuild();
}

/**
 * Form builder; return the site map settings form.
 */
function xmlsitemap_settings_sitemap() {
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings'),
    '#collapsible' => TRUE,
  );
  $form['general']['xmlsitemap_chunk_size'] = array(
    '#type' => 'textfield',
    '#title' => t('Chunk size'),
    '#default_value' => variable_get('xmlsitemap_chunk_size', 200),
    '#size' => 10,
    '#maxlength' => 5,
    '#description' => t('This is the number of links to include in one site map. Values can range between 1 and 50,000. If the total number of links exceeds the chunk size, multiple site maps will be generated.'),
  );
  $form['general']['priority'] = array(
    '#type' => 'fieldset',
    '#title' => t('Priority'),
    '#collapsible' => TRUE,
  );
  $form['general']['priority']['xmlsitemap_front_page_priority'] = array(
    '#type' => 'select',
    '#title' => t('Front page priority'),
    '#description' => t('This is the absolute priority for the front page.'),
    '#default_value' => variable_get('xmlsitemap_front_page_priority', 1),
    '#options' => xmlsitemap_priority_options(),
  );
  drupal_alter('xmlsitemap_sitemap_settings', $form);
  $form = system_settings_form($form);
  $form['#submit'][] = 'xmlsitemap_settings_sitemap_submit';
  $form['#validate'][] = 'xmlsitemap_settings_sitemap_validate';
  return $form;
}

/**
 * Validate the site map settings form.
 */
function xmlsitemap_settings_sitemap_validate($form, &$form_state) {
  $chunk_size = $form_state['values']['xmlsitemap_chunk_size'];
  if (!is_numeric($chunk_size) || $chunk_size <= 0 || $chunk_size > 50000) {
    form_set_error('xmlsitemap_chunk_size', t('The number of links in a site map chunk must be a number between 1, and 50,000 (1 and 50,000 included).'));
  }
}

/**
 * Form builder; return the multi-step database update form.
 */
function xmlsitemap_tools_update($form_state = NULL) {
  $form = array();
  $step = isset($form_state['storage']['step']) ? $form_state['storage']['step'] : 1;
  if (count(variable_get('xmlsitemap_database_update_tasks', array()))) {
    $form['step_display'] = array(
      '#type' => 'item',
      '#value' => t('Step !step', array('!step' => $step)),
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Next',
    );
  }
  else {
    $form['step_display'] = array(
      '#type' => 'item',
      '#value' => t('No further steps require to be executed'),
    );
  }
  return $form;
}

/**
 * Submit function for the multi-step database update form.
 */
function xmlsitemap_tools_update_submit($form, &$form_state) {
  $step = isset($form_state['storage']['step']) ? $form_state['storage']['step'] : 1;
  $tasks = variable_get('xmlsitemap_database_update_tasks', array());
  if (count($tasks)) {
    $task = array_shift($tasks);
    variable_set('xmlsitemap_database_update_tasks', $tasks);
    $batch = array(
      'operations' => array(
        $task['operation']
      ),
      'finished' => $task['finished'],
      'title' => t('Updating the database'),
      'progress_message' => '',
      'error_message' => t('The update has encountered an error.'),
      'file' => $task['file'],
    );
    batch_set($batch);
  }
  $form_state['storage']['step'] = $step + 1;
}

/*****************************************************************************
 * Public functions.
 ****************************************************************************/

/**
 * Batch callback called when the batch operations are completed.
 */
function xmlsitemap_batch_operations_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('The update has been performed.'));
  }
  else {
    drupal_set_message(t('An error occurred and processing did not complete.'), 'error');
    $message = format_plural(count($results), '1 item successfully processed:', '@count items successfully processed:');
    $message .= theme('item_list', $results);
    drupal_set_message($message);
  }
}

/**
 * Determine the frequency of updates to a link.
 * @param $interval
 *  The number of seconds since the last change, or the number of seconds
 *  between the last change, and the previous change.
 * @return
 *  A string representing the update frequency according to the sitemaps.org
 *  protocol.
 */
function xmlsitemap_frequency($interval) {
  $frequencies = array(
    'always' => 3600,
    'hourly' => 86400,
    'daily' => 604800,
    'weekly' => 2419200,
    'monthly' => 29030400,
    'yearly' => 100000000,
  );
  if ($interval < 0 || !is_numeric($interval)) {
    return 'never';
  }
  foreach ($frequencies as $frequency => $value) {
    if ($interval < $value) {
      break;
    }
  }
  return $frequency;
}

/**
 * Get an array of site map priority options.
 * @param $option
 *  If not given, the array will include priority values from 0.0 to 1.0.
 * - exclude: Add option to exclude item from site map.
 * - default: Add option to use default priority. Only for cases where a
 *   default priority exists.
 * - both: Add both the default and exclude options.
 * @return
 *  An array of priority options.
 */
function xmlsitemap_priority_options($option = '') {
  $options = array(
    '1' => t('1.0'),
    '0.9' => t('0.9'),
    '0.8' => t('0.8'),
    '0.7' => t('0.7'),
    '0.6' => t('0.6'),
    '0.5' => t('0.5'),
    '0.4' => t('0.4'),
    '0.3' => t('0.3'),
    '0.2' => t('0.2'),
    '0.1' => t('0.1'),
    '0' => t('0.0')
  );
  if ($option == 'exclude' || $option == 'both') {
    $options['-1'] = t('Not in site map');
  }
  if ($option == 'default' || $option == 'both') {
    $options['-2'] = t('Default');
  }
  return $options;
}

/**
 * Mark the site map as changed and the cache as needing update.
 */
function xmlsitemap_update_sitemap() {
  if (!variable_get('xmlsitemap_changed', FALSE)) {
    variable_set('xmlsitemap_changed', TRUE);
  }
  if (!variable_get('xmlsitemap_update', FALSE)) {
    variable_set('xmlsitemap_update', TRUE);
  }
}

/**
 * Modified version of url(). We don't want to do a separate database query
 * for each url, so we pass the alias as an extra parameter.
 * @param $alias
 *  The URL alias; default is NULL.
 * @return
 *  The fully formatted URL.
 */
function xmlsitemap_url($path = NULL, $alias = NULL, $query = NULL, $fragment = NULL, $absolute = FALSE) {
  if (isset($fragment)) {
    $fragment = "#$fragment";
  }
  $colonpos = strpos($path, ':');
  if ($colonpos !== FALSE && !preg_match('![/?#]!', substr($path, 0, $colonpos)) && filter_xss_bad_protocol($path, FALSE) == check_plain($path)) {
    if (strpos($path, '#') !== FALSE) {
      list($path, $old_fragment) = explode('#', $path, 2);
      if (isset($old_fragment) && !isset($fragment)) {
        $fragment = "#$old_fragment";
      }
    }
    if (isset($query)) {
      $path .= (strpos($path, '?') !== FALSE ? '&' : '?') . $query;
    }
    return $path . $fragment;
  }
  global $base_url;
  static $script;
  static $clean_url;
  $script = isset($script) ? $script : strpos($_SERVER['SERVER_SOFTWARE'], 'Apache') === FALSE ? 'index.php' : '';
  $clean_url = isset($clean_url) ? $clean_url : variable_get('clean_url', FALSE);
  $base = ($absolute ? $base_url .'/' : base_path());

  if (!empty($path) && $path != '<front>') {
    $path = _xmlsitemap_get_path_alias($path, $alias);
    $path = drupal_urlencode($path);

    if (!$clean_url) {
      if (isset($query)) {
        return $base . $script .'?q='. $path .'&'. $query . $fragment;
      }
      else {
        return $base . $script .'?q='. $path . $fragment;
      }
    }
    else {
      if (isset($query)) {
        return $base . $path .'?'. $query . $fragment;
      }
      else {
        return $base . $path . $fragment;
      }
    }
  }
  else {
    if (isset($query)) {
      return $base . $script .'?'. $query . $fragment;
    }
    else {
      return $base . $fragment;
    }
  }
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Modified version of drupal_get_path_alias() for xmlsitemap_url().
 * @param $path
 *  An internal Drupal path.
 * @param $alias
 *  The URL alias; default is NULL.
 * @return
 *  A processed path.
 */
function _xmlsitemap_get_path_alias($path, $alias = NULL) {
  $result = $path;
  if (!empty($alias)) {
    $result = $alias;
  }
  if (function_exists('custom_url_rewrite_outbound')) {
    custom_url_rewrite_outbound($result, $customarray = array('alias' => $alias), $path);
  }
  return $result;
}

/**
 * Return the number of links present in xmlsitemap table.
 */
function _xmlsitemap_link_count() {
  static $link_count;
  if (!isset($link_count)) {
    $link_count = db_result(
      db_query(
        "SELECT COUNT(*) FROM {xmlsitemap}
          WHERE changefreq <> 0
            AND lastmod <> 0
            AND (priority >= 0 AND priority <= 1)"
      )
    );
  }
  return $link_count;
}

/**
 * Display a chunk of the site map.
 * @param $chunk
 *  An integer specifying which chunk of the site map to display.
 */
function _xmlsitemap_output_chunk($chunk = 0) {
  print '<?xml version="1.0" encoding="UTF-8"?>'."\n";
  print '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"'."\n";
  print '  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'."\n";
  print '  xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9'."\n";
  print '  http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">'."\n";
  $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
  $start = $chunk * $chunk_size;
  $links = db_query_range("SELECT * FROM {xmlsitemap}
    WHERE changefreq <> 0
      AND lastmod <> 0
      AND (priority >= 0 AND priority <= 1)
    ORDER BY lastmod DESC, changefreq, priority DESC, loc",
    $start, $chunk_size
  );
  while ($link = db_fetch_object($links)) {
    if ($link->module && function_exists($link->module .'_url')) {
      $function = $link->module .'_url';
      $url = $function($link->loc, $link->type);
    }
    else {
      $url = url($link->loc, array('absolute' => TRUE));
    }
    print '  <url>'."\n";
    print '    <loc>'. check_url($url) .'</loc>'."\n";
    print '    <lastmod>'. gmdate('Y-m-d\TH:i:s+00:00', $link->lastmod) .'</lastmod>'."\n";
    print '    <changefreq>'. xmlsitemap_frequency($link->changefreq) .'</changefreq>'."\n";
    print '    <priority>'. number_format($link->priority, 1) .'</priority>'."\n";
    print '  </url>'."\n";
  }
  print '</urlset>';
}

/**
 * Generate the site map index.
 */
function _xmlsitemap_output_index() {
  print '<?xml version="1.0" encoding="UTF-8"?>'."\n";
  print '<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"'."\n";
  print '  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"'."\n";
  print '  xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9'."\n";
  print '  http://www.sitemaps.org/schemas/sitemap/0.9/siteindex.xsd">'."\n";
  $chunk_size = variable_get('xmlsitemap_chunk_size', 200);
  $link_count = _xmlsitemap_link_count();
  for ($chunk = 0; $chunk < $link_count / $chunk_size; ++$chunk) {
    print '  <sitemap>'."\n";
    print '    <loc>'. url("sitemap$chunk.xml", array('absolute' => TRUE)) .'</loc>'."\n";
    if ($chunk < $link_count / $chunk_size) {
      $from = $chunk * $chunk_size;
      if (!empty($chunk_size)) {
        $lastmod = db_result(
          db_query_range("SELECT MAX(lastmod) FROM {xmlsitemap}
            WHERE changefreq <> 0
              AND lastmod <> 0
              AND (priority >= 0 AND priority <= 1)",
            $from, $chunk_size
          )
        );
        if ($lastmod != 0) {
          print '    <lastmod>'. gmdate('Y-m-d\TH:i:s+00:00', $lastmod) .'</lastmod>'."\n";
        }
      }
    }
    print '  </sitemap>'."\n";
  }
  print '</sitemapindex>';
}

/**
 * Submit the site map to search engines.
 */
function _xmlsitemap_ping() {
  module_invoke_all('xmlsitemap_engines', 'ping');
  variable_set('xmlsitemap_changed', FALSE);
}

/**
 * Update the site map if content has changed.
 */
function _xmlsitemap_update() {
  db_query("DELETE FROM {xmlsitemap}");
  $row = new stdClass();
  $row->loc = drupal_get_normal_path(variable_get('site_frontpage', 'node'));
  $row->module = 'xmlsitemap';
  $row->type = 'frontpage';
  $row->lastmod = time() -1;
  $row->changefreq = 1;
  $row->priority = variable_get('xmlsitemap_front_page_priority', 1);
  drupal_write_record('xmlsitemap', $row);
  module_invoke_all('xmlsitemap_links');
  menu_rebuild();
  db_query("DELETE FROM {cache_page} WHERE cid LIKE '%%sitemap%%.xml'");
  variable_set('xmlsitemap_update', FALSE);
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
