<?php
// $Id: xmlsitemap_user.module,v 1.12.2.18 2009/01/28 20:42:38 kiam Exp $

/**
 * @file
 * Adds user profiles to the site map.
 */

/**
 * @addtogroup xmlsitemap
 * @{
 */

/*****************************************************************************
 * Drupal hooks.
 ****************************************************************************/

/**
 * Implementation of hook_form_alter().
 */
function xmlsitemap_user_form_alter($form_id, &$form) {
  switch ($form_id) {
    case 'user_admin_settings':
      $form['xmlsitemap_user'] = array(
        '#type' => 'fieldset',
        '#title' => t('XML site map'),
        '#collapsible' => TRUE,
      );
      $default = variable_get('xmlsitemap_user_default_priority', 0.5);
      $form['xmlsitemap_user']['xmlsitemap_user_old_default_priority'] = array(
        '#type' => 'value',
        '#value' => $default
      );
      $form['xmlsitemap_user']['xmlsitemap_user_default_priority'] = array(
        '#type' => 'select',
        '#title' => t('Default user priority'),
        '#default_value' => $default,
        '#options' => xmlsitemap_priority_options('exclude'),
        '#description' => t('Choose the default priority for users who have only the authenticated user role.'),
      );
      $form['buttons']['#weight'] = 1;
      $form['#submit'][] = 'xmlsitemap_user_form_submit';
      break;
    case 'user_admin_role':
      $options = xmlsitemap_priority_options('exclude');
      $priority = db_result(db_query("SELECT priority
        FROM {xmlsitemap_user_role}
        WHERE rid = %d", $form['rid']['#value'])
      );
      if ($priority === FALSE) {
        $priority = 0.5;
      }
      $form['xmlsitemap_user'] = array(
        '#type' => 'fieldset',
        '#title' => t('XML site map'),
        '#collapsible' => TRUE,
      );
      $form['xmlsitemap_user']['xmlsitemap_user_role_priority'] = array(
        '#type' => 'select',
        '#title' => t('Default priority'),
        '#default_value' => $priority,
        '#options' => $options,
        '#description' => t("The priority of all a user's roles will be added together to set the user's default priority. If all role priorities are left at default, the user's default priority will be %priority.", array('%priority' => $options[variable_get('xmlsitemap_user_default_priority', '0.5')])),
      );
      $form['submit']['#weight'] = 1;
      $form['delete']['#weight'] = 1;
      $form['#submit'][] = 'xmlsitemap_user_form_submit';
      break;
  }
}

/**
 * Implementation of hook_perm().
 */
function xmlsitemap_user_perm() {
  return array('override profile priority');
}

/**
 * Implementation of hook_user().
 */
function xmlsitemap_user_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'form':
      if ($category != 'account') {
        return array();
      }
    case 'register':
      $priority = db_result(db_query("SELECT priority_override
        FROM {xmlsitemap_user}
        WHERE uid = %d", $account->uid)
      );
      if (user_access('override profile priority')) {
        $form['xmlsitemap_user'] = array(
          '#type' => 'fieldset',
          '#title' => t('XML site map'),
          '#collapsible' => TRUE,
          '#weight' => 7,
        );
        $options = xmlsitemap_priority_options('both');
        if (isset($account->roles)) {
          $roles = array_keys($account->roles);
          $default = db_fetch_object(
            db_query("SELECT MIN(priority) AS min, SUM(priority) AS sum
              FROM {xmlsitemap_user_role}
              WHERE rid IN (". db_placeholders($roles, 'varchar') .")",
              $roles
            )
          );
        }
        if (isset($default->min) && isset($default->sum)) {
          $default_priority = $default->min < 0 ? -1.0 : round(min($default->sum, 1), 1);
        }
        else {
          $default_priority = variable_get('xmlsitemap_user_default_priority', 0.5);
        }
        $form['xmlsitemap_user']['xmlsitemap_user_priority'] = array(
          '#type' => 'select',
          '#title' => t('Priority'),
          '#default_value' => $priority !== FALSE ? $priority : -2.0,
          '#options' => $options,
          '#description' => t('The default priority is %priority.', array('%priority' => $options[(string)$default_priority])),
        );
      }
      else {
        $form['xmlsitemap_user_priority'] = array(
          '#type' => 'value',
          '#value' => $priority !== FALSE ? $priority : -2.0
        );
      }
      return $form;
    case 'insert':
      $row = new stdClass();
      $row->uid = $account->uid;
      $row->last_changed = time();
      if ($edit['xmlsitemap_user_priority'] != -2.0) {
        $row->priority_override = $edit['xmlsitemap_user_priority'];
      }
      drupal_write_record('xmlsitemap_user', $row);
      $edit['xmlsitemap_user_priority'] = NULL;
      xmlsitemap_update_sitemap();
      break;
    case 'update':
      if (($result = db_fetch_object(db_query("SELECT * FROM {xmlsitemap_user} WHERE uid = %d", $account->uid))) === FALSE) {
        $row = new stdClass();
        $row->uid = $account->uid;
        $row->last_changed = time();
      }
      else {
        $row = $result;
        $row->previously_changed = $row->last_changed;
        $row->last_changed = time();
      }
      if ($edit['xmlsitemap_user_priority'] != -2.0) {
        $row->priority_override = $edit['xmlsitemap_user_priority'];
      }
      drupal_write_record('xmlsitemap_user', $row, $result !== FALSE ? 'uid' : NULL);
      $edit['xmlsitemap_user_priority'] = NULL;
      xmlsitemap_update_sitemap();
      break;
    case 'delete':
      db_query("DELETE FROM {xmlsitemap_user} WHERE uid = %d", $account->uid);
      xmlsitemap_update_sitemap();
      break;
  }
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_user_xmlsitemap_links() {
  if (user_access('access user profiles')) {
    switch ($GLOBALS['db_type']) {
      case 'mysql':
      case 'mysqli':
        $coalesce = 'COALESCE';
        break;
      case 'pgsql':
        $coalesce = 'FIRST';
        break;
    }
    $uid = 0;
    $frontpage = explode('/', drupal_get_normal_path(variable_get('site_frontpage', 'node')));
    if (count($frontpage) == 2 && $frontpage[0] == 'user' && is_numeric($frontpage[1])) {
      $uid = $frontpage[1];
    }
    $result = db_query("SELECT u.uid, xu.last_changed, xu.previously_changed, xu.priority_override, SUM(xur.priority) as priority, $coalesce(ua.dst) AS alias
      FROM {xmlsitemap_user} xu
      INNER JOIN {users} u ON xu.uid = u.uid
      LEFT JOIN {users_roles} ur ON xu.uid = ur.uid
      LEFT JOIN {xmlsitemap_user_role} xur ON ur.rid = xur.rid
      LEFT JOIN {url_alias} ua ON ua.src = CONCAT('user/', u.uid)
      WHERE u.status <> 0
        AND u.uid <> %d
      GROUP BY u.uid, xu.last_changed, xu.previously_changed, xu.priority_override
      HAVING MIN(xur.priority) <> -1 OR SUM(xur.priority) IS NULL",
      $uid
    );
    while ($user = db_fetch_object($result)) {
      $age = time() - $user->last_changed;
      $interval = empty($user->previously_changed) ? 0 : $user->last_changed - $user->previously_changed;
      if ($user->priority_override != -2.0) {
        $priority = $user->priority_override;
      }
      else {
        $priority = min(isset($user->priority) ? $user->priority : variable_get('xmlsitemap_user_default_priority', 0.5), 1);
      }
      db_query("INSERT INTO {xmlsitemap} (loc, lastmod, changefreq, priority) VALUES ('%s', %d, %d, %f)",
        xmlsitemap_url('user/'. $user->uid, $user->alias, NULL, NULL, TRUE),
        $user->last_changed, max($age, $interval), $priority);
    }
  }
}

/**
 * Implementation of hook_xmlsitemap_update_module_tables_batch_operations().
 */
function xmlsitemap_user_xmlsitemap_update_module_tables_batch_operations() {
  return array(
    '_xmlsitemap_user_module_table_delete_rows',
    '_xmlsitemap_user_module_table_add_rows',
  );
}

/*****************************************************************************
 * Menu callbacks / form builders, submit/validate functions.
 ****************************************************************************/

/**
 * Form submit function.
 */
function xmlsitemap_user_form_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  $form_id = $form_values['form_id'];
  if ($form_values['form_id'] == 'user_admin_settings' && $form_values['xmlsitemap_user_default_priority'] != $form_values['xmlsitemap_user_old_default_priority']) {
    xmlsitemap_update_sitemap();
  }
  elseif ($form_id == 'user_admin_role') {
    $priority = db_result(db_query("SELECT priority FROM {xmlsitemap_user_role} WHERE rid = %d", $form_values['rid']));
    if ($form_values['op'] == t('Delete role')) {
      db_query("DELETE FROM {xmlsitemap_user_role} WHERE rid = %d", $form_values['rid']);
      if ($priority !== FALSE) {
        xmlsitemap_update_sitemap();
      }
    }
    elseif ($form_values['op'] == t('Save role')) {
      $row = new stdClass();
      $row->rid = $form_values['rid'];
      $row->priority = $form_values['xmlsitemap_user_role_priority'];
      drupal_write_record('xmlsitemap_user_role', $row, $priority !== FALSE ? 'rid' : NULL);
      xmlsitemap_update_sitemap();
    }
  }
}

/*****************************************************************************
 * Private functions - database batch operation.
 ****************************************************************************/

/**
 * Batch function used to update the module tables.
 * @param $context
 *  The context parameter passed from batch_process().
 */
function _xmlsitemap_user_module_table_add_rows(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_user'] = 0;
    $context['sandbox']['max'] = (integer) db_result(db_query('SELECT COUNT(u.uid)
      FROM {users} u
      LEFT JOIN {xmlsitemap_user} xu ON xu.uid = u.uid
      WHERE u.uid <> 0
        AND xu.uid IS NULL')
    );
  }
  if ($context['sandbox']['max']) {
    $result = db_query_range('SELECT u.uid, u.created AS changed
      FROM {users} u
      LEFT JOIN {xmlsitemap_user} xu ON xu.uid = u.uid
      WHERE xu.uid IS NULL
        AND u.uid > %d
      ORDER BY u.uid ASC',
      $context['sandbox']['current_user'], 0, 1
    );
    if ($row = db_fetch_object($result)) {
      drupal_write_record('xmlsitemap_user', $row);
      $context['sandbox']['progress']++;
      $context['sandbox']['current_user'] = $row->uid;
      $context['results']['added'] = $context['sandbox']['progress'];
    }
    if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
      $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    }
  }
}

/**
 * @} End of "addtogroup xmlsitemap".
 */
